import { Color } from "../Color.js";

describe("Web Platform Tests", () => {
    it("should test valid <color>", () => {
        const cases = [
            "currentcolor",
            "transparent",
            "red",
            "magenta",
            "#234",
            "#FEDCBA",
            "rgb(2, 3, 4)",
            "rgb(100%, 0%, 0%)",
            "rgba(2, 3, 4, 0.5)",
            "rgba(2, 3, 4, 50%)",
            "hsl(120, 100%, 50%)",
            "hsla(120, 100%, 50%, 0.25)",
            "rgb(-2, 3, 4)",
            "rgb(100, 200, 300)",
            "rgb(20, 10, 0, -10)",
            "rgb(100%, 200%, 300%)",
            "light-dark(black, white)",
        ];

        cases.forEach((input) => {
            expect(Color.isValid(input)).toBe(true);
        });
    });

    it("should test invalid <color>", () => {
        const cases = [
            "auto",
            "123",
            "#12",
            "#123456789",
            "rgb",
            "rgb(1)",
            "rgb(1,2,3,4,5)",
            "hsla(1,2,3,4,5)",
            "rgb(10%, 20, 30%)",
            "rgba(-2, 300, 400%, -0.5)",
        ];

        cases.forEach((c) => expect(Color.isValid(c)).toBe(false));
    });

    it("should test valid <system-color>", () => {
        const cases = [
            "ActiveText",
            "ButtonBorder",
            "ButtonFace",
            "ButtonText",
            "Canvas",
            "CanvasText",
            "Field",
            "FieldText",
            "GrayText",
            "Highlight",
            "HighlightText",
            "LinkText",
            "Mark",
            "MarkText",
            "VisitedText",
            "SelectedItem",
            "SelectedItemText",
            "AccentColor",
            "AccentColorText",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "system-color")).toBe(true));
    });

    it("should test invalid <named-color>", () => {
        const cases = [
            "",
            " /* hey */\n",
            "4",
            "top",
            "current-Color",
            "ransparent",
            "aiceblue",
            "aniquewhite",
            "aqu",
            "aquaarine",
            "zure",
            "bige",
            "bsque",
            "blak",
            "blacK",
            "blanchedamond",
            "ble",
            "bueviolet",
            "brwn",
            "burlwood",
            "cadetlue",
            "charteuse",
            "chocolae",
            "coal",
            "cornlowerblue",
            "corsilk",
            "cornsilK",
            "crimso",
            "can",
            "darkble",
            "darKblue",
            "darkcya",
            "darKcyan",
            "darkgoldenrd",
            "darKgoldenrod",
            "drkgray",
            "darKgray",
            "darkgree",
            "darKgreen",
            "dargrey",
            "darKgrey",
            "drkkhaki",
            "darKkhaki",
            "darkmagnta",
            "darKmagenta",
            "dakolivegreen",
            "darKolivegreen",
            "drkorange",
            "darKorange",
            "dakorchid",
            "darKorchid",
            "darkrd",
            "darKred",
            "darkalmon",
            "darKsalmon",
            "darkseagree",
            "darKseagreen",
            "darkslatebue",
            "darKslateblue",
            "darkslategry",
            "darKslategray",
            "darkslategre",
            "darKslategrey",
            "arkturquoise",
            "darKturquoise",
            "arkviolet",
            "darKviolet",
            "deppink",
            "deeppinK",
            "deepskyble",
            "deepsKyblue",
            "dmgray",
            "digrey",
            "dodgeblue",
            "frebrick",
            "firebricK",
            "floalwhite",
            "foretgreen",
            "uchsia",
            "gainsoro",
            "gostwhite",
            "old",
            "goldenro",
            "gry",
            "reen",
            "geenyellow",
            "gey",
            "hoeydew",
            "hotink",
            "hotpinK",
            "indianed",
            "idigo",
            "ivry",
            "khai",
            "Khaki",
            "avender",
            "avenderblush",
            "lawgreen",
            "lemonchffon",
            "lightlue",
            "lightcora",
            "lightcyn",
            "lightgoldenodyellow",
            "ightgray",
            "ligtgreen",
            "lihtgrey",
            "ligtpink",
            "lightpinK",
            "lightsalmo",
            "lightseagree",
            "lightsyblue",
            "lightsKyblue",
            "lightslatgray",
            "lightslaterey",
            "lightsteelbue",
            "lightellow",
            "lim",
            "limgreen",
            "inen",
            "maenta",
            "maron",
            "mediumaqamarine",
            "mediumblu",
            "mediumrchid",
            "mediumprple",
            "mediumsegreen",
            "medumslateblue",
            "mediumsprnggreen",
            "mediuturquoise",
            "mediumioletred",
            "mdnightblue",
            "mintcrea",
            "istyrose",
            "moccsin",
            "naajowhite",
            "nay",
            "oldlae",
            "oliv",
            "olivedab",
            "orane",
            "orangere",
            "rchid",
            "palegldenrod",
            "paegreen",
            "paleturuoise",
            "palevioltred",
            "papyawhip",
            "peachpff",
            "per",
            "ink",
            "pinK",
            "pum",
            "powderble",
            "purpl",
            "ed",
            "rosyrown",
            "royallue",
            "sadlebrown",
            "salmn",
            "sandyrown",
            "seagren",
            "seashel",
            "sinna",
            "siler",
            "skybue",
            "sKyblue",
            "slatelue",
            "slategay",
            "slategry",
            "snw",
            "sprnggreen",
            "seelblue",
            "ta",
            "tel",
            "thistl",
            "toato",
            "turquose",
            "violt",
            "whet",
            "whit",
            "whitemoke",
            "whitesmoKe",
            "yelow",
            "yellwgreen",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "named-color")).toBe(false));
    });

    it("should test invalid <hex-color>", () => {
        const cases = ["#", "#f", "#ff", "#ffg", "#fffg", "#fffff", "#fffffg", "#fffffff", "#fffffffg", "#fffffffff"];

        cases.forEach((c) => expect(Color.isValid(c, "hex-color")).toBe(false));
    });

    it("should test valid <rgb()> and <rgba()>", () => {
        const cases = [
            "rgb(none none none)",
            "rgb(none none none / none)",
            "rgb(128 none none)",
            "rgb(128 none none / none)",
            "rgb(none none none / .5)",
            "rgb(20% none none)",
            "rgb(20% none none / none)",
            "rgb(none none none / 50%)",
            "rgba(none none none)",
            "rgba(none none none / none)",
            "rgba(128 none none)",
            "rgba(128 none none / none)",
            "rgba(none none none / .5)",
            "rgba(20% none none)",
            "rgba(20% none none / none)",
            "rgba(none none none / 50%)",
            "rgb(-2 3 4)",
            "rgb(-20% 20% 40%)",
            "rgb(257 30 40)",
            "rgb(250% 20% 40%)",
            "rgba(-2 3 4)",
            "rgba(-20% 20% 40%)",
            "rgba(257 30 40)",
            "rgba(250% 20% 40%)",
            "rgba(-2 3 4 / .5)",
            "rgba(-20% 20% 40% / 50%)",
            "rgba(257 30 40 / 50%)",
            "rgba(250% 20% 40% / .5)",
            "rgb(250% 51 40%)",
            "rgb(255 20% 102)",
            "rgb(500, 0, 0)",
            "rgb(-500, 64, 128)",
            "rgb(calc(infinity), 0, 0)",
            "rgb(0, calc(infinity), 0)",
            "rgb(0, 0, calc(infinity))",
            "rgba(0, 0, 0, calc(infinity))",
            "rgb(calc(-infinity), 0, 0)",
            "rgb(0, calc(-infinity), 0)",
            "rgb(0, 0, calc(-infinity))",
            "rgba(0, 0, 0, calc(-infinity))",
            "rgb(calc(NaN), 0, 0)",
            "rgb(0, calc(NaN), 0)",
            "rgb(0, 0, calc(NaN))",
            "rgba(0, 0, 0, calc(NaN))",
            "rgb(calc(0 / 0), 0, 0)",
            "rgb(0, calc(0 / 0), 0)",
            "rgb(0, 0, calc(0 / 0))",
            "rgba(0, 0, 0, calc(0 / 0))",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "rgb")).toBe(true));
    });

    it("should test invalid <rgb()> and <rgba()>", () => {
        const cases = [
            "rgb(none, none, none)",
            "rgba(none, none, none, none)",
            "rgb(128, 0, none)",
            "rgb(255, 255, 255, none)",
            "rgb(10%, 50%, 0)",
            "rgb(255, 50%, 0%)",
            "rgb(0, 0 0)",
            "rgb(,0, 0, 0)",
            "rgb(0, 0,, 0)",
            "rgb(0, 0, 0deg)",
            "rgb(0, 0, light)",
            "rgb()",
            "rgb(0)",
            "rgb(0, 0)",
            "rgb(0%)",
            "rgb(0%, 0%)",
            "rgba(10%, 50%, 0, 1)",
            "rgba(255, 50%, 0%, 1)",
            "rgba(0, 0, 0 0)",
            "rgba(0, 0, 0, 0deg)",
            "rgba(0, 0, 0, light)",
            "rgba()",
            "rgba(0)",
            "rgba(0, 0, 0, 0, 0)",
            "rgba(0%)",
            "rgba(0%, 0%)",
            "rgba(0%, 0%, 0%, 0%, 0%)",
            "rgb(257, 0, 5 / 0)",
        ];
        cases.forEach((c) => expect(Color.isValid(c, "rgb")).toBe(false));
    });

    it("should test valid <hsl()> and <hsla()>", () => {
        const cases = [
            "hsl(120 30% 50%)",
            "hsl(120 30% 50% / 0.5)",
            "hsl(none none none)",
            "hsl(0 0% 0%)",
            "hsl(none none none / none)",
            "hsl(0 0% 0% / 0)",
            "hsla(none none none)",
            "hsla(0 0% 0%)",
            "hsla(none none none / none)",
            "hsla(0 0% 0% / 0)",
            "hsl(120 none none)",
            "hsl(120 0% 0%)",
            "hsl(120 80% none)",
            "hsl(120 80% 0%)",
            "hsl(120 none 50%)",
            "hsl(120 0% 50%)",
            "hsl(120 100% 50% / none)",
            "hsl(120 100% 50% / 0)",
            "hsl(none 100% 50%)",
            "hsl(0 100% 50%)",
            "hsl(120 30 50)",
            "hsl(120 30 50 / 0.5)",
            "hsl(120 30% 50)",
            "hsl(120 30% 50 / 0.5)",
            "hsl(120 30 50%)",
            "hsl(120 30 50% / 0.5)",
            "hsl(120 none 50)",
            "hsl(120 none 50 / 0.5)",
            "hsl(120 30 none)",
            "hsl(120 30 none / 0.5)",
            "hsl(120 30 50 / none)",
            "hsl(0 -50% 40%)",
            "hsl(30 -50% 60)",
            "hsl(0 -50 40%)",
            "hsl(30 -50 60)",
            "hsl(calc(infinity) 100% 50%)",
            "hsl(calc(-infinity) 100% 50%)",
            "hsl(calc(0 / 0) 100% 50%)",
            "hsl(90 50% 50% / calc(infinity))",
            "hsl(90 50% 50% / calc(-infinity))",
            "hsl(90 50% 50% / calc(0 / 0))",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "hsl")).toBe(true));
    });

    it("should test invalid <hsl()> and <hsla()>", () => {
        const cases = [
            "hsl(none, none, none)",
            "hsla(none, none, none, none)",
            "hsl(none, 100%, 50%)",
            "hsla(120, 100%, 50%, none)",
            "hsl(10, 50%, 0)",
            "hsl(50%, 50%, 0%)",
            "hsl(0, 0% 0%)",
            "hsl(0, 0%, light)",
            "hsl()",
            "hsl(0)",
            "hsl(0, 0%)",
            "hsl(0, 50, 30%)",
            "hsl(0, 50%, 30)",
            "hsla(10, 50%, 0, 1)",
            "hsla(50%, 50%, 0%, 1)",
            "hsla(0, 0% 0%, 1)",
            "hsla(0, 0%, light, 1)",
            "hsla()",
            "hsla(0)",
            "hsla(0, 0%)",
            "hsla(0, 0%, 0%, 1, 0%)",
            "hsl(0, 50, 30%, 1)",
            "hsl(0, 50%, 30, 1)",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "hsl")).toBe(false));
    });

    it("should test valid <hwb()>", () => {
        const cases = [
            "hwb(120 30% 50%)",
            "hwb(120 30% 50% / 0.5)",
            "hwb(none none none)",
            "hwb(0 0% 0%)",
            "hwb(none none none / none)",
            "hwb(0 0% 0% / 0)",
            "hwb(120 none none)",
            "hwb(120 0% 0%)",
            "hwb(120 80% none)",
            "hwb(120 80% 0%)",
            "hwb(120 none 50%)",
            "hwb(120 0% 50%)",
            "hwb(120 30% 50% / none)",
            "hwb(120 30% 50% / 0)",
            "hwb(none 100% 50% / none)",
            "hwb(0 100% 50% / 0)",
            "hwb(120 30 50)",
            "hwb(120 30 50 / 0.5)",
            "hwb(120 30% 50)",
            "hwb(120 30% 50 / 0.5)",
            "hwb(120 30 50%)",
            "hwb(120 30 50% / 0.5)",
            "hwb(120 none 50)",
            "hwb(120 none 50 / 0.5)",
            "hwb(120 30 none)",
            "hwb(120 30 none / 0.5)",
            "hwb(120 30 50 / none)",
            "hwb(320deg 30% 40%)",
            "hwb(calc(infinity) 20% 10%)",
            "hwb(calc(-infinity) 20% 10%)",
            "hwb(calc(0 / 0) 20% 10%)",
            "hwb(90 20% 10% / calc(infinity))",
            "hwb(90 20% 10% / calc(-infinity))",
            "hwb(90 20% 10% / calc(0 / 0))",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "hwb")).toBe(true));
    });

    it("should test invalid <hwb()>", () => {
        const cases = [
            "hwba(120 30% 50%)",
            "hwba(120 30% 50% / 0.5)",
            "hwb(90deg, 50%, 50%)",
            "hwb(90deg, 50%, 50%, 0.2)",
            "hwb(90, 50%, 50%)",
            "hwb(90, 50%, 50%, 0.2)",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "hwb")).toBe(false));
    });

    it("should test valid <lab()>, <oklab()>, <lch()> and <oklch()>", () => {
        const lab = [
            "lab(0 0 0)",
            "lab(0 0 0 / 1)",
            "lab(0 0 0 / 0.5)",
            "lab(20 0 10/0.5)",
            "lab(20 0 10/50%)",
            "lab(400 0 10/50%)",
            "lab(50 -160 160)",
            "lab(50 -200 200)",
            "lab(0 0 0 / -10%)",
            "lab(0 0 0 / 110%)",
            "lab(0 0 0 / 300%)",
            "lab(-40 0 0)",
            "lab(50 -20 0)",
            "lab(50 0 -20)",
            "lab(50% 50% -20%)",
            "lab(50 -20% -20%)",
            "lab(calc(50 * 3) calc(0.5 - 1) calc(1.5) / calc(-0.5 + 1))",
            "lab(calc(-50 * 3) calc(0.5 + 1) calc(-1.5) / calc(-0.5 * 2))",
            "lab(calc(50%) 50% 0.5)",
            "lab(200 calc(50%) 0.5)",
            "lab(-200 calc(50%) 0.5)",
            "lab(none 20 calc(0.5))",
            "lab(none none none / none)",
            "lab(none none none)",
            "lab(20 none none / none)",
            "lab(none none none / 0.5)",
            "lab(0 0 0 / none)",
            "lab(calc(infinity) 0 0)",
            "lab(50 calc(infinity) 0)",
            "lab(50 calc(-infinity) 0)",
            "lab(calc(NaN) 0 0)",
            "lab(calc(0 / 0) 0 0)",
        ];

        lab.forEach((c) => expect(Color.isValid(c, "lab")).toBe(true));

        const oklab = [
            "oklab(0 0 0)",
            "oklab(0 0 0 / 1)",
            "oklab(0 0 0 / 0.5)",
            "oklab(0.2 0 0.1/0.5)",
            "oklab(0.2 0 0.1/50%)",
            "oklab(4 0 0.1/50%)",
            "oklab(0.5 -1.6 1.6)",
            "oklab(0.5 -2 2)",
            "oklab(0 0 0 / -10%)",
            "oklab(0 0 0 / 110%)",
            "oklab(0 0 0 / 300%)",
            "oklab(-0.4 0 0)",
            "oklab(0.5 -2 0)",
            "oklab(0.5 0 -2)",
            "oklab(50% 50% -20%)",
            "oklab(0.5 -20% -20%)",
            "oklab(calc(0.5 * 3) calc(0.5 - 1) calc(1.5) / calc(-0.5 + 1))",
            "oklab(calc(-0.5 * 3) calc(0.5 + 1) calc(-1.5) / calc(-0.5 * 2))",
            "oklab(calc(50%) 50% 0.5)",
            "oklab(200 calc(50%) 0.5)",
            "oklab(-200 calc(50%) 0.5)",
            "oklab(none 0.2 calc(0.5))",
            "oklab(none none none / none)",
            "oklab(none none none)",
            "oklab(0.2 none none / none)",
            "oklab(none none none / 0.5)",
            "oklab(0 0 0 / none)",
            "oklab(calc(infinity) 0 0)",
            "oklab(0.5 calc(infinity) 0)",
            "oklab(0.5 calc(-infinity) 0)",
            "oklab(calc(NaN) 0 0)",
            "oklab(calc(0 / 0) 0 0)",
        ];

        oklab.forEach((c) => expect(Color.isValid(c, "oklab")).toBe(true));

        const lch = [
            "lch(0 0 0deg)",
            "lch(0 0 0deg / 1)",
            "lch(0 0 0deg / 0.5)",
            "lch(100 230 0deg / 0.5)",
            "lch(20 50 20deg/0.5)",
            "lch(20 50 20deg/50%)",
            "lch(10 20 20deg / -10%)",
            "lch(10 20 20deg / 110%)",
            "lch(10 20 1.28rad)",
            "lch(10 20 380deg)",
            "lch(10 20 -340deg)",
            "lch(10 20 740deg)",
            "lch(10 20 -700deg)",
            "lch(-40 0 0)",
            "lch(20 -20 0)",
            "lch(0 0 0 / 0.5)",
            "lch(10 20 20 / 110%)",
            "lch(10 20 -700)",
            "lch(50% 50% 20)",
            "lch(0.5 -20% -20)",
            "lch(calc(50 * 3) calc(0.5 - 1) calc(20deg * 2) / calc(-0.5 + 1))",
            "lch(calc(-50 * 3) calc(0.5 + 1) calc(-20deg * 2) / calc(-0.5 * 2))",
            "lch(calc(50%) 50% 0.5)",
            "lch(200 calc(50%) 0.5)",
            "lch(-200 calc(50%) 0.5)",
            "lch(calc(50%) -100 0.5)",
            "lch(none 20 calc(0.5))",
            "lch(none none none / none)",
            "lch(none none none)",
            "lch(20 none none / none)",
            "lch(none none none / 0.5)",
            "lch(0 0 0 / none)",
            "lch(calc(infinity) 0 0)",
            "lch(50 calc(infinity) 0)",
            "lch(50 calc(-infinity) 0)",
            "lch(calc(NaN) 0 0)",
            "lch(calc(0 / 0) 0 0)",
        ];

        lch.forEach((c) => expect(Color.isValid(c, "lch")).toBe(true));

        const oklch = [
            "oklch(0 0 0deg)",
            "oklch(0 0 0deg / 1)",
            "oklch(0 0 0deg / 0.5)",
            "oklch(1 2.3 0deg / 0.5)",
            "oklch(0.2 0.5 20deg/0.5)",
            "oklch(0.2 0.5 20deg/50%)",
            "oklch(0.1 0.2 20deg / -10%)",
            "oklch(0.1 0.2 20deg / 110%)",
            "oklch(0.1 0.2 1.28rad)",
            "oklch(0.1 0.2 380deg)",
            "oklch(0.1 0.2 -340deg)",
            "oklch(0.1 0.2 740deg)",
            "oklch(0.1 0.2 -700deg)",
            "oklch(-4 0 0)",
            "oklch(0.2 -0.2 0)",
            "oklch(0 0 0 / 0.5)",
            "oklch(0.1 0.2 20 / 110%)",
            "oklch(0.1 0.2 -700)",
            "oklch(50% 50% 20)",
            "oklch(0.5 -20% -20)",
            "oklch(calc(0.5 * 3) calc(0.5 - 1) calc(20deg * 2) / calc(-0.5 + 1))",
            "oklch(calc(-0.5 * 3) calc(0.5 + 1) calc(-20deg * 2) / calc(-0.5 * 2))",
            "oklch(calc(50%) 50% 0.5)",
            "oklch(200 calc(50%) 0.5)",
            "oklch(-200 calc(50%) 0.5)",
            "oklch(calc(50%) -100 0.5)",
            "oklch(none 0.2 calc(0.5))",
            "oklch(none none none / none)",
            "oklch(none none none)",
            "oklch(0.2 none none / none)",
            "oklch(none none none / 0.5)",
            "oklch(0 0 0 / none)",
            "oklch(calc(infinity) 0 0)",
            "oklch(0.5 calc(infinity) 0)",
            "oklch(0.5 calc(-infinity) 0)",
            "oklch(calc(NaN) 0 0)",
            "oklch(calc(0 / 0) 0 0)",
        ];

        oklch.forEach((c) => expect(Color.isValid(c, "oklch")).toBe(true));
    });

    it("should test invalid <lab()>, <oklab()>, <lch()> and <oklch()>", () => {
        for (const colorSpace of ["lab", "oklab"]) {
            const cases = [
                `${colorSpace}(0% 0 0 1)`,
                `${colorSpace}(0% 0 0 10%)`,
                `${colorSpace}(0% 0 0deg)`,
                `${colorSpace}(0% 0% 0deg)`,
                `${colorSpace}(40% 0 0deg)`,
                `color(${colorSpace} 20% 0 10 / 50%)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }

        for (const colorSpace of ["lch", "oklch"]) {
            const cases = [
                `${colorSpace}(20% 10 10deg 10)`,
                `${colorSpace}(20% 10 10deg 10 / 0.5)`,
                `color(${colorSpace} 20% 0 10 / 50%)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }
    });

    it("should test valid <color()>", () => {
        for (const colorSpace of [
            "srgb",
            "srgb-linear",
            "a98-rgb",
            "rec2020",
            "prophoto-rgb",
            "display-p3",
            "xyz",
            "xyz-d50",
            "xyz-d65",
        ]) {
            const cases = [
                `color(${colorSpace} 0% 0% 0%)`,
                `color(${colorSpace} 10% 10% 10%)`,
                `color(${colorSpace} .2 .2 25%)`,
                `color(${colorSpace} 0 0 0 / 1)`,
                `color(${colorSpace} 0% 0 0 / 0.5)`,
                `color(${colorSpace} 20% 0 10/0.5)`,
                `color(${colorSpace} 20% 0 10/50%)`,
                `color(${colorSpace} 400% 0 10/50%)`,
                `color(${colorSpace} 50% -160 160)`,
                `color(${colorSpace} 50% -200 200)`,
                `color(${colorSpace} 0 0 0 / -10%)`,
                `color(${colorSpace} 0 0 0 / 110%)`,
                `color(${colorSpace} 0 0 0 / 300%)`,
                `color(${colorSpace} 200 200 200)`,
                `color(${colorSpace} 200 200 200 / 200)`,
                `color(${colorSpace} -200 -200 -200)`,
                `color(${colorSpace} -200 -200 -200 / -200)`,
                `color(${colorSpace} 200% 200% 200%)`,
                `color(${colorSpace} 200% 200% 200% / 200%)`,
                `color(${colorSpace} -200% -200% -200% / -200%)`,
                `color(${colorSpace} calc(0.5 + 1) calc(0.5 - 1) calc(0.5) / calc(-0.5 + 1))`,
                `color(${colorSpace} calc(50% * 3) calc(-150% / 3) calc(50%) / calc(-50% * 3))`,
                `color(${colorSpace} calc(50%) 50% 0.5)`,

                `color(${colorSpace} none none none / none)`,
                `color(${colorSpace} none none none)`,
                `color(${colorSpace} 10% none none / none)`,
                `color(${colorSpace} none none none / 0.5)`,
                `color(${colorSpace} 0 0 0 / none)`,

                `color(${colorSpace} 0 calc(infinity) 0)`,
                `color(${colorSpace} 0 calc(-infinity) 0)`,
                `color(${colorSpace} calc(NaN) 0 0)`,
                `color(${colorSpace} calc(0 / 0) 0 0)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(true));
        }
    });

    it("should test invalid <color()>", () => {
        const RGB_SPACES = ["srgb", "srgb-linear", "a98-rgb", "rec2020", "prophoto-rgb"];
        const XYZ_SPACES = ["xyz", "xyz-d50", "xyz-d65"];

        for (const colorSpace of RGB_SPACES) {
            const cases = [
                `color(${colorSpace} 0 0 0 0)`,
                `color(${colorSpace} 0deg 0% 0)`,
                `color(${colorSpace} 0% 0 0 1)`,
                `color(${colorSpace} 0% 0 0 10%)`,
                `color(${colorSpace} 0% 0 0deg)`,
                `color(${colorSpace} 0% 0% 0deg)`,
                `color(${colorSpace} 40% 0 0deg)`,
                `color(${colorSpace} 50% -200)`,
                `color(${colorSpace} 50%)`,
                `color(${colorSpace})`,
                `color(${colorSpace} 50% -200 / 0.5)`,
                `color(${colorSpace} 50% / 0.5)`,
                `color(${colorSpace} / 0.5)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }

        for (const colorSpace of XYZ_SPACES) {
            const cases = [
                `color(${colorSpace} 0 0 0 0)`,
                `color(${colorSpace} 0deg 0% 0)`,
                `color(${colorSpace} 0% 0 0 1)`,
                `color(${colorSpace} 0% 0 0 10%)`,
                `color(${colorSpace} 0% 0 0deg)`,
                `color(${colorSpace} 0% 0% 0deg)`,
                `color(${colorSpace} 40% 0 0deg)`,
                `color(${colorSpace} 1 1)`,
                `color(${colorSpace} 1)`,
                `color(${colorSpace})`,
                `color(${colorSpace} 1 1 / .5)`,
                `color(${colorSpace} 1 / 0.5)`,
                `color(${colorSpace} / 50%)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }

        const cases = [
            "color()",
            "color(banana 1 1 1)",
            "color(displayp3 1 1 1)",
            "color(1 1 1)",
            "color(srgb 1 1)",
            "color(srgb 1)",
            "color(srgb 0, 0, 0)",
            "color(srgb 1 1 1 1)",
            "color(srgb 1 1 1 1 1)",
            "color(srgb 1 eggs 1)",
            "color(srgb 1 1 1 / bacon)",
            "color(srgb 1 1 1 / 1 cucumber)",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "srgb")).toBe(false));

        for (const colorSpace of [...RGB_SPACES, ...XYZ_SPACES]) {
            expect(Color.isValid(`${colorSpace}(0 0 0)`, colorSpace)).toBe(false);
        }
    });

    it("should test valid relative <color-function>", () => {
        for (const rgbFn of ["rgb", "rgba"]) {
            const rgb = [
                `${rgbFn}(from rebeccapurple r g b)`,
                `${rgbFn}(from rebeccapurple r g b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g b / alpha)`,
                `${rgbFn}(from hsl(120deg 20% 50% / .5) r g b / alpha)`,
                `${rgbFn}(from rgb(from rebeccapurple r g b) r g b)`,
                `${rgbFn}(from rebeccapurple 0 0 0)`,
                `${rgbFn}(from rebeccapurple 0 0 0 / 0)`,
                `${rgbFn}(from rebeccapurple 0 g b / alpha)`,
                `${rgbFn}(from rebeccapurple r 0 b / alpha)`,
                `${rgbFn}(from rebeccapurple r g 0 / alpha)`,
                `${rgbFn}(from rebeccapurple r g b / 0)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) 0 g b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r 0 b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g 0 / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g b / 0)`,
                `${rgbFn}(from rebeccapurple 25 g b / alpha)`,
                `${rgbFn}(from rebeccapurple r 25 b / alpha)`,
                `${rgbFn}(from rebeccapurple r g 25 / alpha)`,
                `${rgbFn}(from rebeccapurple r g b / .25)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) 25 g b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r 25 b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g 25 / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g b / .20)`,
                `${rgbFn}(from rebeccapurple 20% g b / alpha)`,
                `${rgbFn}(from rebeccapurple r 20% b / alpha)`,
                `${rgbFn}(from rebeccapurple r g 20% / alpha)`,
                `${rgbFn}(from rebeccapurple r g b / 20%)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) 20% g b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r 20% b / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g 20% / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g b / 20%)`,
                `${rgbFn}(from rebeccapurple 25 g b / 25%)`,
                `${rgbFn}(from rebeccapurple r 25 b / 25%)`,
                `${rgbFn}(from rebeccapurple r g 25 / 25%)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) 25 g b / 25%)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r 25 b / 25%)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r g 25 / 25%)`,
                `${rgbFn}(from rebeccapurple g b r)`,
                `${rgbFn}(from rebeccapurple b alpha r / g)`,
                `${rgbFn}(from rebeccapurple r r r / r)`,
                `${rgbFn}(from rebeccapurple alpha alpha alpha / alpha)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) g b r)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) b alpha r / g)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r r r / r)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) alpha alpha alpha / alpha)`,
                `${rgbFn}(from rebeccapurple r 20% 10)`,
                `${rgbFn}(from rebeccapurple r 10 20%)`,
                `${rgbFn}(from rebeccapurple 0% 10 10)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r 20% 10)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) r 10 20%)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) 0% 10 10)`,
                `${rgbFn}(from rebeccapurple calc(r) calc(g) calc(b))`,
                `${rgbFn}(from rebeccapurple r calc(g * 2) 10)`,
                `${rgbFn}(from rebeccapurple b calc(r * .5) 10)`,
                `${rgbFn}(from rebeccapurple r calc(g * .5 + g * .5) 10)`,
                `${rgbFn}(from rebeccapurple r calc(b * .5 - g * .5) 10)`,
                `${rgbFn}(from rgb(20%, 40%, 60%, 80%) calc(r) calc(g) calc(b) / calc(alpha))`,
                `${rgbFn}(from rebeccapurple none none none)`,
                `${rgbFn}(from rebeccapurple none none none / none)`,
                `${rgbFn}(from rebeccapurple r g none)`,
                `${rgbFn}(from rebeccapurple r g none / alpha)`,
                `${rgbFn}(from rebeccapurple r g b / none)`,
                `${rgbFn}(from rgb(20% 40% 60% / 80%) r g none / alpha)`,
                `${rgbFn}(from rgb(20% 40% 60% / 80%) r g b / none)`,
                `${rgbFn}(from rgb(none none none) r g b)`,
                `${rgbFn}(from rgb(none none none / none) r g b / alpha)`,
                `${rgbFn}(from rgb(20% none 60%) r g b)`,
                `${rgbFn}(from rgb(20% 40% 60% / none) r g b / alpha)`,
                `${rgbFn}(from currentColor r g b)`,
                `${rgbFn}(from color-mix(in srgb, red, red) r g b / alpha)`,
            ];

            rgb.forEach((c) => expect(Color.isValid(c, "rgb")).toBe(true));
        }

        for (const hslFn of ["hsl", "hsla"]) {
            const hsl = [
                `${hslFn}(from rebeccapurple h s l)`,
                `${hslFn}(from rebeccapurple h s l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h s l / alpha)`,
                `${hslFn}(from hsl(120deg 20% 50% / .5) h s l / alpha)`,
                `${hslFn}(from hsl(from rebeccapurple h s l) h s l)`,
                `${hslFn}(from rebeccapurple 0 0% 0%)`,
                `${hslFn}(from rebeccapurple 0deg 0% 0%)`,
                `${hslFn}(from rebeccapurple 0 0% 0% / 0)`,
                `${hslFn}(from rebeccapurple 0deg 0% 0% / 0)`,
                `${hslFn}(from rebeccapurple 0 s l / alpha)`,
                `${hslFn}(from rebeccapurple 0deg s l / alpha)`,
                `${hslFn}(from rebeccapurple h 0% l / alpha)`,
                `${hslFn}(from rebeccapurple h s 0% / alpha)`,
                `${hslFn}(from rebeccapurple h s l / 0)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) 0 s l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) 0deg s l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h 0% l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h s 0% / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h s l / 0)`,
                `${hslFn}(from rebeccapurple 25 s l / alpha)`,
                `${hslFn}(from rebeccapurple 25deg s l / alpha)`,
                `${hslFn}(from rebeccapurple h 20% l / alpha)`,
                `${hslFn}(from rebeccapurple h s 20% / alpha)`,
                `${hslFn}(from rebeccapurple h s l / .25)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) 25 s l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) 25deg s l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h 20% l / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h s 20% / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h s l / .2)`,
                `${hslFn}(from rebeccapurple h l s)`,
                `${hslFn}(from rebeccapurple h alpha l / s)`,
                `${hslFn}(from rebeccapurple h l l / l)`,
                `${hslFn}(from rebeccapurple h alpha alpha / alpha)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h l s)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h alpha l / s)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h l l / l)`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) h alpha alpha / alpha)`,
                `${hslFn}(from rebeccapurple calc(h) calc(s) calc(l))`,
                `${hslFn}(from rgb(20%, 40%, 60%, 80%) calc(h) calc(s) calc(l) / calc(alpha))`,
                `${hslFn}(from rebeccapurple none none none)`,
                `${hslFn}(from rebeccapurple none none none / none)`,
                `${hslFn}(from rebeccapurple h s none)`,
                `${hslFn}(from rebeccapurple h s none / alpha)`,
                `${hslFn}(from rebeccapurple h s l / none)`,
                `${hslFn}(from rebeccapurple none s l / alpha)`,
                `${hslFn}(from hsl(120deg 20% 50% / .5) h s none / alpha)`,
                `${hslFn}(from hsl(120deg 20% 50% / .5) h s l / none)`,
                `${hslFn}(from hsl(120deg 20% 50% / .5) none s l / alpha)`,
                `${hslFn}(from hsl(none none none) h s l)`,
                `${hslFn}(from hsl(none none none / none) h s l / alpha)`,
                `${hslFn}(from hsl(120deg none 50% / .5) h s l)`,
                `${hslFn}(from hsl(120deg 20% 50% / none) h s l / alpha)`,
                `${hslFn}(from hsl(none 20% 50% / .5) h s l / alpha)`,
                `${hslFn}(from currentColor h s l)`,
                `${hslFn}(from color-mix(in srgb, red, red) h s l / alpha)`,
            ];

            hsl.forEach((c) => expect(Color.isValid(c, "hsl")).toBe(true));
        }

        const hwb = [
            "hwb(from rebeccapurple h w b)",
            "hwb(from rebeccapurple h w b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h w b / alpha)",
            "hwb(from hsl(120deg 20% 50% / .5) h w b / alpha)",
            "hwb(from hwb(from rebeccapurple h w b) h w b)",
            "hwb(from rebeccapurple 0 0% 0%)",
            "hwb(from rebeccapurple 0deg 0% 0%)",
            "hwb(from rebeccapurple 0 0% 0% / 0)",
            "hwb(from rebeccapurple 0deg 0% 0% / 0)",
            "hwb(from rebeccapurple 0 w b / alpha)",
            "hwb(from rebeccapurple 0deg w b / alpha)",
            "hwb(from rebeccapurple h 0% b / alpha)",
            "hwb(from rebeccapurple h w 0% / alpha)",
            "hwb(from rebeccapurple h w b / 0)",
            "hwb(from rgb(20%, 40%, 60%, 80%) 0 w b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) 0deg w b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h 0% b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h w 0% / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h w b / 0)",
            "hwb(from rebeccapurple 25 w b / alpha)",
            "hwb(from rebeccapurple 25deg w b / alpha)",
            "hwb(from rebeccapurple h 20% b / alpha)",
            "hwb(from rebeccapurple h w 20% / alpha)",
            "hwb(from rebeccapurple h w b / .2)",
            "hwb(from rgb(20%, 40%, 60%, 80%) 25 w b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) 25deg w b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h 20% b / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h w 20% / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h w b / .2)",
            "hwb(from rebeccapurple h b w)",
            "hwb(from rebeccapurple h alpha w / b)",
            "hwb(from rebeccapurple h w w / w)",
            "hwb(from rebeccapurple h alpha alpha / alpha)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h b w)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h alpha w / b)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h w w / w)",
            "hwb(from rgb(20%, 40%, 60%, 80%) h alpha alpha / alpha)",
            "hwb(from rebeccapurple calc(h) calc(w) calc(b))",
            "hwb(from rgb(20%, 40%, 60%, 80%) calc(h) calc(w) calc(b) / calc(alpha))",
            "hwb(from rebeccapurple none none none)",
            "hwb(from rebeccapurple none none none / none)",
            "hwb(from rebeccapurple h w none)",
            "hwb(from rebeccapurple h w none / alpha)",
            "hwb(from rebeccapurple h w b / none)",
            "hwb(from rebeccapurple none w b / alpha)",
            "hwb(from hwb(120deg 20% 50% / .5) h w none / alpha)",
            "hwb(from hwb(120deg 20% 50% / .5) h w b / none)",
            "hwb(from hwb(120deg 20% 50% / .5) none w b / alpha)",
            "hwb(from hwb(none none none) h w b)",
            "hwb(from hwb(none none none / none) h w b / alpha)",
            "hwb(from hwb(120deg none 50% / .5) h w b)",
            "hwb(from hwb(120deg 20% 50% / none) h w b / alpha)",
            "hwb(from hwb(none 20% 50% / .5) h w b / alpha)",
            "hwb(from currentColor h w b)",
            "hwb(from color-mix(in srgb, red, red) h w b / alpha)",
        ];

        hwb.forEach((c) => expect(Color.isValid(c, "hwb")).toBe(true));

        const lab = [
            "lab(from lab(25 20 50) l a b)",
            "lab(from lab(25 20 50) l a b / alpha)",
            "lab(from lab(25 20 50 / 40%) l a b / alpha)",
            "lab(from lab(200 300 400 / 500%) l a b / alpha)",
            "lab(from lab(-200 -300 -400 / -500%) l a b / alpha)",
            "lab(from lab(from lab(25 20 50) l a b) l a b)",
            "lab(from color(display-p3 0 0 0) l a b / alpha)",
            "lab(from lab(25 20 50) 0 0 0)",
            "lab(from lab(25 20 50) 0 0 0 / 0)",
            "lab(from lab(25 20 50) 0 a b / alpha)",
            "lab(from lab(25 20 50) l 0 b / alpha)",
            "lab(from lab(25 20 50) l a 0 / alpha)",
            "lab(from lab(25 20 50) l a b / 0)",
            "lab(from lab(25 20 50 / 40%) 0 a b / alpha)",
            "lab(from lab(25 20 50 / 40%) l 0 b / alpha)",
            "lab(from lab(25 20 50 / 40%) l a 0 / alpha)",
            "lab(from lab(25 20 50 / 40%) l a b / 0)",
            "lab(from lab(25 20 50) 35 a b / alpha)",
            "lab(from lab(25 20 50) l 35 b / alpha)",
            "lab(from lab(25 20 50) l a 35 / alpha)",
            "lab(from lab(25 20 50) l a b / .35)",
            "lab(from lab(25 20 50 / 40%) 35 a b / alpha)",
            "lab(from lab(25 20 50 / 40%) l 35 b / alpha)",
            "lab(from lab(25 20 50 / 40%) l a 35 / alpha)",
            "lab(from lab(25 20 50 / 40%) l a b / .35)",
            "lab(from lab(0.7 45 30 / 40%) 200 300 400 / 500)",
            "lab(from lab(0.7 45 30 / 40%) -200 -300 -400 / -500)",
            "lab(from lab(25 20 50) l b a)",
            "lab(from lab(25 20 50) l a a / a)",
            "lab(from lab(25 20 50 / 40%) l b a)",
            "lab(from lab(25 20 50 / 40%) l a a / a)",
            "lab(from lab(25 20 50) calc(l) calc(a) calc(b))",
            "lab(from lab(25 20 50 / 40%) calc(l) calc(a) calc(b) / calc(alpha))",
            "lab(from lab(50 -30 40) calc(l - 20) a b)",
            "lab(from lab(50 -30 40) l calc(a / 3) calc(b / 2))",
            "lab(from lab(25 20 50) none none none)",
            "lab(from lab(25 20 50) none none none / none)",
            "lab(from lab(25 20 50) l a none)",
            "lab(from lab(25 20 50) l a none / alpha)",
            "lab(from lab(25 20 50) l a b / none)",
            "lab(from lab(25 20 50 / 40%) l a none / alpha)",
            "lab(from lab(25 20 50 / 40%) l a b / none)",
            "lab(from lab(none none none) l a b)",
            "lab(from lab(none none none / none) l a b / alpha)",
            "lab(from lab(25 none 50) l a b)",
            "lab(from lab(25 20 50 / none) l a b / alpha)",
            "lab(from currentColor l a b)",
            "lab(from color-mix(in lab, lab(25 20 50), lab(25 20 50)) l a b / alpha)",
        ];

        lab.forEach((c) => expect(Color.isValid(c, "lab")).toBe(true));

        const oklab = [
            "oklab(from oklab(0.25 0.2 0.5) l a b)",
            "oklab(from oklab(0.25 0.2 0.5) l a b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a b / alpha)",
            "oklab(from oklab(2 3 4 / 500%) l a b / alpha)",
            "oklab(from oklab(-2 -3 -4 / -500%) l a b / alpha)",
            "oklab(from oklab(from oklab(0.25 0.2 0.5) l a b) l a b)",
            "oklab(from color(display-p3 0 0 0) l a b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) 0 0 0)",
            "oklab(from oklab(0.25 0.2 0.5) 0 0 0 / 0)",
            "oklab(from oklab(0.25 0.2 0.5) 0 a b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l 0 b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l a 0 / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l a b / 0)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) 0 a b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l 0 b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a 0 / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a b / 0)",
            "oklab(from oklab(0.25 0.2 0.5) 0.35 a b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l 0.35 b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l a 0.35 / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l a b / 0.35)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) 0.35 a b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l 0.35 b / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a 0.35 / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a b / .35)",
            "oklab(from oklab(0.7 0.45 0.3 / 40%) 2 3 4 / 500)",
            "oklab(from oklab(0.7 0.45 0.3 / 40%) -2 -3 -4 / -500)",
            "oklab(from oklab(0.25 0.2 0.5) l b a)",
            "oklab(from oklab(0.25 0.2 0.5) l a a / a)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l b a)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a a / a)",
            "oklab(from oklab(0.25 0.2 0.5) calc(l) calc(a) calc(b))",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) calc(l) calc(a) calc(b) / calc(alpha))",
            "oklab(from oklab(0.7 0.25 -0.15) calc(l - 0.2) a b)",
            "oklab(from oklab(0.7 0.25 -0.15) l calc(a / 2) calc(b / 3))",
            "oklab(from oklab(0.25 0.2 0.5) none none none)",
            "oklab(from oklab(0.25 0.2 0.5) none none none / none)",
            "oklab(from oklab(0.25 0.2 0.5) l a none)",
            "oklab(from oklab(0.25 0.2 0.5) l a none / alpha)",
            "oklab(from oklab(0.25 0.2 0.5) l a b / none)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a none / alpha)",
            "oklab(from oklab(0.25 0.2 0.5 / 40%) l a b / none)",
            "oklab(from oklab(none none none) l a b)",
            "oklab(from oklab(none none none / none) l a b / alpha)",
            "oklab(from oklab(0.25 none 0.5) l a b)",
            "oklab(from oklab(0.25 0.2 0.5 / none) l a b / alpha)",
            "oklab(from currentColor l a b)",
            "oklab(from color-mix(in oklab, oklab(0.25 0.2 0.5), oklab(0.25 0.2 0.5)) l a b / alpha)",
        ];

        oklab.forEach((c) => expect(Color.isValid(c, "oklab")).toBe(true));

        const lch = [
            "lch(from lch(0.7 45 30) l c h)",
            "lch(from lch(0.7 45 30) l c h / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c h / alpha)",
            "lch(from lch(200 300 400 / 500%) l c h / alpha)",
            "lch(from lch(-200 -300 -400 / -500%) l c h / alpha)",
            "lch(from lch(from lch(0.7 45 30) l c h) l c h)",
            "lch(from color(display-p3 0 0 0) l c h / alpha)",
            "lch(from lab(0.7 45 30) l c h / alpha)",
            "lch(from lch(0.7 45 30) 0 0 0)",
            "lch(from lch(0.7 45 30) 0 0 0deg)",
            "lch(from lch(0.7 45 30) 0 0 0 / 0)",
            "lch(from lch(0.7 45 30) 0 0 0deg / 0)",
            "lch(from lch(0.7 45 30) 0 c h / alpha)",
            "lch(from lch(0.7 45 30) l 0 h / alpha)",
            "lch(from lch(0.7 45 30) l c 0 / alpha)",
            "lch(from lch(0.7 45 30) l c 0deg / alpha)",
            "lch(from lch(0.7 45 30) l c h / 0)",
            "lch(from lch(0.7 45 30 / 40%) 0 c h / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l 0 h / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c 0 / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c 0deg / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c h / 0)",
            "lch(from lch(0.7 45 30) 25 c h / alpha)",
            "lch(from lch(0.7 45 30) l 25 h / alpha)",
            "lch(from lch(0.7 45 30) l c 25 / alpha)",
            "lch(from lch(0.7 45 30) l c 25deg / alpha)",
            "lch(from lch(0.7 45 30) l c h / 0.25)",
            "lch(from lch(0.7 45 30 / 40%) 25 c h / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l 25 h / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c 25 / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c 25deg / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c h / .25)",
            "lch(from lch(0.7 45 30 / 40%) 200 300 400 / 500)",
            "lch(from lch(0.7 45 30 / 40%) -200 -300 -400 / -500)",
            "lch(from lch(0.7 45 30 / 40%) 50 120 400deg / 500)",
            "lch(from lch(0.7 45 30 / 40%) 50 120 -400deg / -500)",
            "lch(from lch(0.7 45 30) l c c / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c c / alpha)",
            "lch(from lch(0.7 45 30) calc(l) calc(c) calc(h))",
            "lch(from lch(0.7 45 30 / 40%) calc(l) calc(c) calc(h) / calc(alpha))",
            "lch(from lch(50 100 300) calc(l - 20) c h)",
            "lch(from lch(50 100 300) l calc(c / 2) h)",
            "lch(from lch(50 100 300) l c calc(h * 2.5))",
            "lch(from lch(0.7 45 30) none none none)",
            "lch(from lch(0.7 45 30) none none none / none)",
            "lch(from lch(0.7 45 30) l c none)",
            "lch(from lch(0.7 45 30) l c none / alpha)",
            "lch(from lch(0.7 45 30) l c h / none)",
            "lch(from lch(0.7 45 30 / 40%) l c none / alpha)",
            "lch(from lch(0.7 45 30 / 40%) l c h / none)",
            "lch(from lch(none none none) l c h)",
            "lch(from lch(none none none / none) l c h / alpha)",
            "lch(from lch(0.7 none 30) l c h)",
            "lch(from lch(0.7 45 30 / none) l c h / alpha)",
            "lch(from currentColor l c h)",
            "lch(from color-mix(in lch, lch(70 45 30), lch(70 45 30)) l c h / alpha)",
        ];

        lch.forEach((c) => expect(Color.isValid(c, "lch")).toBe(true));

        const oklch = [
            "oklch(from oklch(0.7 0.45 30) l c h)",
            "oklch(from oklch(0.7 0.45 30) l c h / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c h / alpha)",
            "oklch(from oklch(2 3 400 / 500%) l c h / alpha)",
            "oklch(from oklch(-2 -3 -400 / -500%) l c h / alpha)",
            "oklch(from oklch(from oklch(0.7 0.45 30) l c h) l c h)",
            "oklch(from color(display-p3 0 0 0) l c h / alpha)",
            "oklch(from oklab(0.7 45 30) l c h / alpha)",
            "oklch(from oklch(0.7 0.45 30) 0 0 0)",
            "oklch(from oklch(0.7 0.45 30) 0 0 0deg)",
            "oklch(from oklch(0.7 0.45 30) 0 0 0 / 0)",
            "oklch(from oklch(0.7 0.45 30) 0 0 0deg / 0)",
            "oklch(from oklch(0.7 0.45 30) 0 c h / alpha)",
            "oklch(from oklch(0.7 0.45 30) l 0 h / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c 0 / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c 0deg / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c h / 0)",
            "oklch(from oklch(0.7 0.45 30 / 40%) 0 c h / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l 0 h / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c 0 / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c 0deg / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c h / 0)",
            "oklch(from oklch(0.7 0.45 30) 0.25 c h / alpha)",
            "oklch(from oklch(0.7 0.45 30) l 0.25 h / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c 0.25 / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c 25deg / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c h / 0.25)",
            "oklch(from oklch(0.7 0.45 30 / 40%) 0.25 c h / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l 0.25 h / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c 0.25 / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c 25deg / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c h / 0.25)",
            "oklch(from oklch(0.7 0.45 30 / 40%) 2 3 400 / 500)",
            "oklch(from oklch(0.7 0.45 30 / 40%) -2 -3 -400 / -500)",
            "oklch(from oklch(0.7 0.45 30 / 40%) 0.5 1.2 400deg / 500)",
            "oklch(from oklch(0.7 0.45 30 / 40%) 0.5 1.2 -400deg / -500)",
            "oklch(from oklch(0.7 0.45 30) l c c / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c c / alpha)",
            "oklch(from oklch(0.7 0.45 30) calc(l) calc(c) calc(h))",
            "oklch(from oklch(0.7 0.45 30 / 40%) calc(l) calc(c) calc(h) / calc(alpha))",
            "oklch(from oklch(0.7 0.2 300) calc(l - 0.2) c h)",
            "oklch(from oklch(0.7 0.2 300) l calc(c / 2) h)",
            "oklch(from oklch(0.7 0.2 300) l c calc(h * 2.5))",
            "oklch(from red calc(1 / l) c h)",
            "oklch(from oklch(0.7 0.45 30) none none none)",
            "oklch(from oklch(0.7 0.45 30) none none none / none)",
            "oklch(from oklch(0.7 0.45 30) l c none)",
            "oklch(from oklch(0.7 0.45 30) l c none / alpha)",
            "oklch(from oklch(0.7 0.45 30) l c h / none)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c none / alpha)",
            "oklch(from oklch(0.7 0.45 30 / 40%) l c h / none)",
            "oklch(from oklch(none none none) l c h)",
            "oklch(from oklch(none none none / none) l c h / alpha)",
            "oklch(from oklch(0.7 none 30) l c h)",
            "oklch(from oklch(0.7 0.45 30 / none) l c h / alpha)",
            "oklch(from currentColor l c h)",
            "oklch(from color-mix(in oklch, oklch(0.7 0.45 30), oklch(0.7 0.45 30)) l c h / alpha)",
        ];

        oklch.forEach((c) => expect(Color.isValid(c, "oklch")).toBe(true));

        for (const colorSpace of ["srgb", "srgb-linear", "a98-rgb", "rec2020", "prophoto-rgb", "display-p3"]) {
            const cases = [
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g b / alpha)`,
                `color(from color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 0 0 0)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 0 0 0 / 0)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 0 g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r 0 b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g 0 / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b / 0)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} 0 g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r 0 b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g 0 / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g b / 0)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 0.2 g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 20% g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r 0.2 b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r 20% b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g 0.2 / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g 20% / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b / 0.2)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b / 20%)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} 0.2 g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} 20% g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r 0.2 b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r 20% b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g 0.2 / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g 20% / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g b / 0.2)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g b / 20%)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 2 3 4)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 2 3 4 / 5)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} -2 -3 -4)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} -2 -3 -4 / -5)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 200% 300% 400%)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 200% 300% 400% / 500%)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} -200% -300% -400%)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} -200% -300% -400% / -500%)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} g b r)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} b alpha r / g)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r r r / r)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} alpha alpha alpha / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} g b r)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} b alpha r / g)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r r r / r)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} alpha alpha alpha / alpha)`,
                `color(from color(${colorSpace} 1.7 1.5 1.3) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 1.7 1.5 1.3) ${colorSpace} r g b / alpha)`,
                `color(from color(${colorSpace} 1.7 1.5 1.3 / 140%) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 1.7 1.5 1.3 / 140%) ${colorSpace} r g b / alpha)`,
                `color(from color(${colorSpace} -0.7 -0.5 -0.3) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} -0.7 -0.5 -0.3) ${colorSpace} r g b / alpha)`,
                `color(from color(${colorSpace} -0.7 -0.5 -0.3 / -40%) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} -0.7 -0.5 -0.3 / -40%) ${colorSpace} r g b / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} calc(r) calc(g) calc(b))`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} calc(r) calc(g) calc(b) / calc(alpha))`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} none none none)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} none none none / none)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g none)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g none / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b / none)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g none / alpha)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / 40%) ${colorSpace} r g b / none)`,
                `color(from color(${colorSpace} none none none) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} none none none / none) ${colorSpace} r g b / alpha)`,
                `color(from color(${colorSpace} 0.7 none 0.3) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3 / none) ${colorSpace} r g b / alpha)`,
                `color(from currentColor ${colorSpace} r g b)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(true));
        }

        for (const colorSpace of ["xyz", "xyz-d50", "xyz-d65"]) {
            const cases = [
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y z)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y z / alpha)`,
                `color(from color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z) ${colorSpace} x y z)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} 0 0 0)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} 0 0 0 / 0)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} 0 y z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x 0 z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y 0 / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z / 0)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} 0 y z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x 0 z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y 0 / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y z / 0)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} 0.2 y z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x 0.2 z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y 0.2 / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z / 0.2)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z / 20%)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} 0.2 y z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x 0.2 z / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y 0.2 / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y z / 0.2)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} y z x)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x x x / x)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} y z x)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x x x / x)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} calc(x) calc(y) calc(z))`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} calc(x) calc(y) calc(z) / calc(alpha))`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} none none none)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} none none none / none)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y none)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y none / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z / none)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y none / alpha)`,
                `color(from color(${colorSpace} 7 -20.5 100 / 40%) ${colorSpace} x y z / none)`,
                `color(from color(${colorSpace} none none none) ${colorSpace} x y z)`,
                `color(from color(${colorSpace} none none none / none) ${colorSpace} x y z / alpha)`,
                `color(from color(${colorSpace} 7 none 100) ${colorSpace} x y z)`,
                `color(from color(${colorSpace} 7 -20.5 100 / none) ${colorSpace} x y z / alpha)`,
                `color(from currentColor ${colorSpace} x y z)`,
                `color(from color-mix(in ${colorSpace}, color(${colorSpace} 0.7 0.5 0.3), color(${colorSpace} 0.7 0.5 0.3)) ${colorSpace} x y z / alpha)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(true));
        }
    });

    it("should test invalid relative <color-function>", () => {
        const rgb = [
            "rgb(from rebeccapurple r 10deg 10)",
            "rgb(from rebeccapurple r 10 10deg)",
            "rgb(from rebeccapurple 10deg g b)",
            "rgb(from rgb(10%, 20%, 30%, 40%) r 10deg 10)",
            "rgb(from rgb(10%, 20%, 30%, 40%) r 10 10deg)",
            "rgb(from rgb(10%, 20%, 30%, 40%) 10deg g b)",
            "rgb(from rebeccapurple red g b)",
            "rgb(from rebeccapurple l g b)",
            "rgb(from rebeccapurple h g b)",
            "rgb(from rebeccapurple, r, g, b)",
            "rgba(from rgb(10%, 20%, 30%, 40%), r, g, b, alpha)",
            "rgb(from rebeccapurple calc(r + 1%) g b)",
            "rgb(0 0 0 / alpha)",
        ];

        rgb.forEach((c) => expect(Color.isValid(c, "rgb")).toBe(false));

        const hsl = [
            "hsl(from rebeccapurple 10% s l)",
            "hsl(from rgb(10%, 20%, 30%, 40%) 10% s l)",
            "hsl(from rebeccapurple hue s l)",
            "hsl(from rebeccapurple x s l)",
            "hsl(from rebeccapurple h g b)",
            "hsl(from rebeccapurple, h, s, l)",
            "hsla(from rgb(10%, 20%, 30%, 40%), h, s, l, alpha)",
            "hsl(from rebeccapurple calc(h + 1deg) s l)",
            "hsl(from rebeccapurple calc(h + 1%) s l)",
        ];

        hsl.forEach((c) => expect(Color.isValid(c, "hsl")).toBe(false));

        const hwb = [
            "hwb(from rebeccapurple 10% w b)",
            "hwb(from rgb(10%, 20%, 30%, 40%) 10% w b)",
            "hwb(from rebeccapurple hue w b)",
            "hwb(from rebeccapurple x w b)",
            "hwb(from rebeccapurple h g b)",
            "hwb(from rebeccapurple calc(h + 1deg) w b)",
            "hwb(from rebeccapurple calc(h + 1%) w b)",
        ];

        hwb.forEach((c) => expect(Color.isValid(c, "hwb")).toBe(false));

        for (const colorSpace of ["lab", "oklab"]) {
            const cases = [
                `${colorSpace}(from ${colorSpace}(.25 20 50) l 10deg 10)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50) l 10 10deg)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50) 10deg a b)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50 / 40%) l 10deg 10)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50 / 40%) l 10 10deg)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50 / 40%) 10deg a b)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50) lightness a b)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50) x a b)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50) h g b)`,
                `${colorSpace}(from ${colorSpace}(.25 20 50) l calc(a + 1%) b)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }

        for (const colorSpace of ["lch", "oklch"]) {
            const cases = [
                `${colorSpace}(from ${colorSpace}(.70 45 30) l 10deg h)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) l c 10%)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) 10deg c h)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30 / 40%) l 10deg h)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30 / 40%) l c 10%)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30 / 40%) 10deg c h)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) lightness c h)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) x c h)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) l g b)`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) l c calc(h + 1%))`,
                `${colorSpace}(from ${colorSpace}(.70 45 30) l c calc(h + 1deg))`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }

        for (const colorSpace of ["srgb", "srgb-linear", "a98-rgb", "rec2020", "prophoto-rgb", "display-p3"]) {
            const cases = [
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} 10deg g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r 10deg b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g 10deg)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} r g b / 10deg)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} red g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} x g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} l g b)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} x y z)`,
                `color(from color(${colorSpace} 0.7 0.5 0.3) ${colorSpace} calc(r + 1%) g b)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }

        for (const colorSpace of ["xyz", "xyz-d50", "xyz-d65"]) {
            const cases = [
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} 10deg y z)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x 10deg z)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y 10deg)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} x y z / 10deg)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} red y)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} r y z)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} l y z)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} r g b)`,
                `color(from color(${colorSpace} 7 -20.5 100) ${colorSpace} calc(x + 1%) y z)`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, colorSpace)).toBe(false));
        }
    });

    it("should test valid <color-mix()>", () => {
        const cases = [
            "color-mix(in srgb, red, blue)",
            "color-mix(in srgb, 70% red, 50% blue)",
            "color-mix(in srgb, red 70%, blue 50%)",
            "color-mix(in hsl, red, blue)",
            "color-mix(in hsl, red, blue)",
            "color-mix(in hsl, red calc(20%), blue)",
            "color-mix(in hsl, red calc(20%), blue)",
            "color-mix(in hsl, red calc(var(--v)*1%), blue)",
            "color-mix(in hsl, red calc(var(--v)*1%), blue)",
            "color-mix(in hsl, currentcolor, blue)",
            "color-mix(in hsl, currentcolor, blue)",
            "color-mix(in hsl, red 60%, blue 40%)",
            "color-mix(in hsl, red 60%, blue)",
            "color-mix(in hsl, red 50%, blue)",
            "color-mix(in hsl, red, blue)",
            "color-mix(in hsl, red, blue 50%)",
            "color-mix(in hsl, red, blue)",
            "color-mix(in lch decreasing hue, red, hsl(120, 100%, 50%))",
            "color-mix(in lch decreasing hue, red, rgb(0, 255, 0))",
            "color-mix(in hsl, hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46), rgb(133, 102, 71))",
            "color-mix(in hsl, 50% hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46), rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20%), 50% hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46), rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20%) 25%, hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46) 25%, rgb(133, 102, 71))",
            "color-mix(in hsl, 25% hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46) 25%, rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20%), 25% hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46) 75%, rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20%), hsl(30deg 30% 40%) 25%)",
            "color-mix(in hsl, rgb(46, 56, 46) 75%, rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20%) 25%, hsl(30deg 30% 40%) 75%)",
            "color-mix(in hsl, rgb(46, 56, 46) 25%, rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20%) 30%, hsl(30deg 30% 40%) 90%)",
            "color-mix(in hsl, rgb(46, 56, 46) 30%, rgb(133, 102, 71) 90%)",
            "color-mix(in hsl, hsl(120deg 10% 20%) 12.5%, hsl(30deg 30% 40%) 37.5%)",
            "color-mix(in hsl, rgb(46, 56, 46) 12.5%, rgb(133, 102, 71) 37.5%)",
            "color-mix(in hsl, hsl(120deg 10% 20%) 0%, hsl(30deg 30% 40%))",
            "color-mix(in hsl, rgb(46, 56, 46) 0%, rgb(133, 102, 71))",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4), hsl(30deg 30% 40% / .8))",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4), rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, hsl(120deg 10% 20%) 25%, hsl(30deg 30% 40% / .8))",
            "color-mix(in hsl, rgb(46, 56, 46) 25%, rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, 25% hsl(120deg 10% 20% / .4), hsl(30deg 30% 40% / .8))",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 25%, rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4), 25% hsl(30deg 30% 40% / .8))",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 75%, rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4), hsl(30deg 30% 40% / .8) 25%)",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 75%, rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4) 25%, hsl(30deg 30% 40% / .8) 75%)",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 25%, rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4) 30%, hsl(30deg 30% 40% / .8) 90%)",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 30%, rgba(133, 102, 71, 0.8) 90%)",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4) 12.5%, hsl(30deg 30% 40% / .8) 37.5%)",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 12.5%, rgba(133, 102, 71, 0.8) 37.5%)",
            "color-mix(in hsl, hsl(120deg 10% 20% / .4) 0%, hsl(30deg 30% 40% / .8))",
            "color-mix(in hsl, rgba(46, 56, 46, 0.4) 0%, rgba(133, 102, 71, 0.8))",
            "color-mix(in hsl, hsl(40deg 50% 50%), hsl(60deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 149, 64), rgb(191, 191, 64))",
            "color-mix(in hsl, hsl(60deg 50% 50%), hsl(40deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 191, 64), rgb(191, 149, 64))",
            "color-mix(in hsl, hsl(50deg 50% 50%), hsl(330deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 170, 64), rgb(191, 64, 128))",
            "color-mix(in hsl, hsl(330deg 50% 50%), hsl(50deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 64, 128), rgb(191, 170, 64))",
            "color-mix(in hsl, hsl(20deg 50% 50%), hsl(320deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 106, 64), rgb(191, 64, 149))",
            "color-mix(in hsl, hsl(320deg 50% 50%), hsl(20deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 64, 149), rgb(191, 106, 64))",
            "color-mix(in hsl shorter hue, hsl(40deg 50% 50%), hsl(60deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 149, 64), rgb(191, 191, 64))",
            "color-mix(in hsl shorter hue, hsl(60deg 50% 50%), hsl(40deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 191, 64), rgb(191, 149, 64))",
            "color-mix(in hsl shorter hue, hsl(50deg 50% 50%), hsl(330deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 170, 64), rgb(191, 64, 128))",
            "color-mix(in hsl shorter hue, hsl(330deg 50% 50%), hsl(50deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 64, 128), rgb(191, 170, 64))",
            "color-mix(in hsl shorter hue, hsl(20deg 50% 50%), hsl(320deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 106, 64), rgb(191, 64, 149))",
            "color-mix(in hsl shorter hue, hsl(320deg 50% 50%), hsl(20deg 50% 50%))",
            "color-mix(in hsl, rgb(191, 64, 149), rgb(191, 106, 64))",
            "color-mix(in hsl longer hue, hsl(40deg 50% 50%), hsl(60deg 50% 50%))",
            "color-mix(in hsl longer hue, rgb(191, 149, 64), rgb(191, 191, 64))",
            "color-mix(in hsl longer hue, hsl(60deg 50% 50%), hsl(40deg 50% 50%))",
            "color-mix(in hsl longer hue, rgb(191, 191, 64), rgb(191, 149, 64))",
            "color-mix(in hsl longer hue, hsl(50deg 50% 50%), hsl(330deg 50% 50%))",
            "color-mix(in hsl longer hue, rgb(191, 170, 64), rgb(191, 64, 128))",
            "color-mix(in hsl longer hue, hsl(330deg 50% 50%), hsl(50deg 50% 50%))",
            "color-mix(in hsl longer hue, rgb(191, 64, 128), rgb(191, 170, 64))",
            "color-mix(in hsl longer hue, hsl(20deg 50% 50%), hsl(320deg 50% 50%))",
            "color-mix(in hsl longer hue, rgb(191, 106, 64), rgb(191, 64, 149))",
            "color-mix(in hsl longer hue, hsl(320deg 50% 50%), hsl(20deg 50% 50%))",
            "color-mix(in hsl longer hue, rgb(191, 64, 149), rgb(191, 106, 64))",
            "color-mix(in hsl increasing hue, hsl(40deg 50% 50%), hsl(60deg 50% 50%))",
            "color-mix(in hsl increasing hue, rgb(191, 149, 64), rgb(191, 191, 64))",
            "color-mix(in hsl increasing hue, hsl(60deg 50% 50%), hsl(40deg 50% 50%))",
            "color-mix(in hsl increasing hue, rgb(191, 191, 64), rgb(191, 149, 64))",
            "color-mix(in hsl increasing hue, hsl(50deg 50% 50%), hsl(330deg 50% 50%))",
            "color-mix(in hsl increasing hue, rgb(191, 170, 64), rgb(191, 64, 128))",
            "color-mix(in hsl increasing hue, hsl(330deg 50% 50%), hsl(50deg 50% 50%))",
            "color-mix(in hsl increasing hue, rgb(191, 64, 128), rgb(191, 170, 64))",
            "color-mix(in hsl increasing hue, hsl(20deg 50% 50%), hsl(320deg 50% 50%))",
            "color-mix(in hsl increasing hue, rgb(191, 106, 64), rgb(191, 64, 149))",
            "color-mix(in hsl increasing hue, hsl(320deg 50% 50%), hsl(20deg 50% 50%))",
            "color-mix(in hsl increasing hue, rgb(191, 64, 149), rgb(191, 106, 64))",
            "color-mix(in hsl decreasing hue, hsl(40deg 50% 50%), hsl(60deg 50% 50%))",
            "color-mix(in hsl decreasing hue, rgb(191, 149, 64), rgb(191, 191, 64))",
            "color-mix(in hsl decreasing hue, hsl(60deg 50% 50%), hsl(40deg 50% 50%))",
            "color-mix(in hsl decreasing hue, rgb(191, 191, 64), rgb(191, 149, 64))",
            "color-mix(in hsl decreasing hue, hsl(50deg 50% 50%), hsl(330deg 50% 50%))",
            "color-mix(in hsl decreasing hue, rgb(191, 170, 64), rgb(191, 64, 128))",
            "color-mix(in hsl decreasing hue, hsl(330deg 50% 50%), hsl(50deg 50% 50%))",
            "color-mix(in hsl decreasing hue, rgb(191, 64, 128), rgb(191, 170, 64))",
            "color-mix(in hsl decreasing hue, hsl(20deg 50% 50%), hsl(320deg 50% 50%))",
            "color-mix(in hsl decreasing hue, rgb(191, 106, 64), rgb(191, 64, 149))",
            "color-mix(in hsl decreasing hue, hsl(320deg 50% 50%), hsl(20deg 50% 50%))",
            "color-mix(in hsl decreasing hue, rgb(191, 64, 149), rgb(191, 106, 64))",
            "color-mix(in hsl, hsl(none none none), hsl(none none none))",
            "color-mix(in hsl, rgb(0, 0, 0), rgb(0, 0, 0))",
            "color-mix(in hsl, hsl(none none none), hsl(30deg 40% 80%))",
            "color-mix(in hsl, rgb(0, 0, 0), rgb(224, 204, 184))",
            "color-mix(in hsl, hsl(120deg 20% 40%), hsl(none none none))",
            "color-mix(in hsl, rgb(82, 122, 82), rgb(0, 0, 0))",
            "color-mix(in hsl, hsl(120deg 20% none), hsl(30deg 40% 60%))",
            "color-mix(in hsl, rgb(0, 0, 0), rgb(194, 153, 112))",
            "color-mix(in hsl, hsl(120deg 20% 40%), hsl(30deg 20% none))",
            "color-mix(in hsl, rgb(82, 122, 82), rgb(0, 0, 0))",
            "color-mix(in hsl, hsl(none 20% 40%), hsl(30deg none 80%))",
            "color-mix(in hsl, rgb(122, 82, 82), rgb(204, 204, 204))",
            "color-mix(in hsl, hsl(120deg 40% 40% / none), hsl(0deg 40% 40%))",
            "color-mix(in hsl, rgba(61, 143, 61, 0), rgb(143, 61, 61))",
            "color-mix(in hsl, hsl(120deg 40% 40% / none), hsl(0deg 40% 40% / 0.5))",
            "color-mix(in hsl, rgba(61, 143, 61, 0), rgba(143, 61, 61, 0.5))",
            "color-mix(in hsl, hsl(120deg 40% 40% / none), hsl(0deg 40% 40% / none))",
            "color-mix(in hsl, rgba(61, 143, 61, 0), rgba(143, 61, 61, 0))",
            "color-mix(in hsl, color(display-p3 0 1 0) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, color(display-p3 0 1 0) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, lab(100 104.3 -50.9) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, lab(100 104.3 -50.9) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, lab(0 104.3 -50.9) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, lab(0 104.3 -50.9) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, lch(100 116 334) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, lch(100 116 334) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, lch(0 116 334) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, lch(0 116 334) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, oklab(100 0.365 -0.16) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, oklab(1 0.365 -0.16) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, oklab(0 0.365 -0.16) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, oklab(0 0.365 -0.16) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, oklch(100 0.399 336.3) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, oklch(1 0.399 336.3) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, oklab(1 0.365 -0.16) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, oklab(1 0.365 -0.16) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, oklch(1 0.399 336.3) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, oklch(1 0.399 336.3) 100%, rgb(0, 0, 0))",
            "color-mix(in hsl, oklch(0 0.399 336.3) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hsl, oklch(0 0.399 336.3) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26), rgb(153, 115, 77))",
            "color-mix(in hwb, 50% hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26), rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%), 50% hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26), rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%) 25%, hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26) 25%, rgb(153, 115, 77))",
            "color-mix(in hwb, 25% hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26) 25%, rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%), 25% hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26) 75%, rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%), hwb(30deg 30% 40%) 25%)",
            "color-mix(in hwb, rgb(26, 204, 26) 75%, rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%) 25%, hwb(30deg 30% 40%) 75%)",
            "color-mix(in hwb, rgb(26, 204, 26) 25%, rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%) 30%, hwb(30deg 30% 40%) 90%)",
            "color-mix(in hwb, rgb(26, 204, 26) 30%, rgb(153, 115, 77) 90%)",
            "color-mix(in hwb, hwb(120deg 10% 20%) 12.5%, hwb(30deg 30% 40%) 37.5%)",
            "color-mix(in hwb, rgb(26, 204, 26) 12.5%, rgb(153, 115, 77) 37.5%)",
            "color-mix(in hwb, hwb(120deg 10% 20%) 0%, hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 204, 26) 0%, rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4), hwb(30deg 30% 40% / .8))",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4), rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4) 25%, hwb(30deg 30% 40% / .8))",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 25%, rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, 25% hwb(120deg 10% 20% / .4), hwb(30deg 30% 40% / .8))",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 25%, rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, hwb(120deg 10% 20%), 25% hwb(30deg 30% 40% / .8))",
            "color-mix(in hwb, rgb(26, 204, 26) 75%, rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4), hwb(30deg 30% 40% / .8) 25%)",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 75%, rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4) 25%, hwb(30deg 30% 40% / .8) 75%)",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 25%, rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4) 30%, hwb(30deg 30% 40% / .8) 90%)",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 30%, rgba(153, 115, 77, 0.8) 90%)",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4) 12.5%, hwb(30deg 30% 40% / .8) 37.5%)",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 12.5%, rgba(153, 115, 77, 0.8) 37.5%)",
            "color-mix(in hwb, hwb(120deg 10% 20% / .4) 0%, hwb(30deg 30% 40% / .8))",
            "color-mix(in hwb, rgba(26, 204, 26, 0.4) 0%, rgba(153, 115, 77, 0.8))",
            "color-mix(in hwb, hwb(40deg 30% 40%), hwb(60deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 128, 77), rgb(153, 153, 77))",
            "color-mix(in hwb, hwb(60deg 30% 40%), hwb(40deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 153, 77), rgb(153, 128, 77))",
            "color-mix(in hwb, hwb(50deg 30% 40%), hwb(330deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 140, 77), rgb(153, 77, 115))",
            "color-mix(in hwb, hwb(330deg 30% 40%), hwb(50deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 77, 115), rgb(153, 140, 77))",
            "color-mix(in hwb, hwb(20deg 30% 40%), hwb(320deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 102, 77), rgb(153, 77, 128))",
            "color-mix(in hwb, hwb(320deg 30% 40%), hwb(20deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 77, 128), rgb(153, 102, 77))",
            "color-mix(in hwb shorter hue, hwb(40deg 30% 40%), hwb(60deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 128, 77), rgb(153, 153, 77))",
            "color-mix(in hwb shorter hue, hwb(60deg 30% 40%), hwb(40deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 153, 77), rgb(153, 128, 77))",
            "color-mix(in hwb shorter hue, hwb(50deg 30% 40%), hwb(330deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 140, 77), rgb(153, 77, 115))",
            "color-mix(in hwb shorter hue, hwb(330deg 30% 40%), hwb(50deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 77, 115), rgb(153, 140, 77))",
            "color-mix(in hwb shorter hue, hwb(20deg 30% 40%), hwb(320deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 102, 77), rgb(153, 77, 128))",
            "color-mix(in hwb shorter hue, hwb(320deg 30% 40%), hwb(20deg 30% 40%))",
            "color-mix(in hwb, rgb(153, 77, 128), rgb(153, 102, 77))",
            "color-mix(in hwb longer hue, hwb(40deg 30% 40%), hwb(60deg 30% 40%))",
            "color-mix(in hwb longer hue, rgb(153, 128, 77), rgb(153, 153, 77))",
            "color-mix(in hwb longer hue, hwb(60deg 30% 40%), hwb(40deg 30% 40%))",
            "color-mix(in hwb longer hue, rgb(153, 153, 77), rgb(153, 128, 77))",
            "color-mix(in hwb longer hue, hwb(50deg 30% 40%), hwb(330deg 30% 40%))",
            "color-mix(in hwb longer hue, rgb(153, 140, 77), rgb(153, 77, 115))",
            "color-mix(in hwb longer hue, hwb(330deg 30% 40%), hwb(50deg 30% 40%))",
            "color-mix(in hwb longer hue, rgb(153, 77, 115), rgb(153, 140, 77))",
            "color-mix(in hwb longer hue, hwb(20deg 30% 40%), hwb(320deg 30% 40%))",
            "color-mix(in hwb longer hue, rgb(153, 102, 77), rgb(153, 77, 128))",
            "color-mix(in hwb longer hue, hwb(320deg 30% 40%), hwb(20deg 30% 40%))",
            "color-mix(in hwb longer hue, rgb(153, 77, 128), rgb(153, 102, 77))",
            "color-mix(in hwb increasing hue, hwb(40deg 30% 40%), hwb(60deg 30% 40%))",
            "color-mix(in hwb increasing hue, rgb(153, 128, 77), rgb(153, 153, 77))",
            "color-mix(in hwb increasing hue, hwb(60deg 30% 40%), hwb(40deg 30% 40%))",
            "color-mix(in hwb increasing hue, rgb(153, 153, 77), rgb(153, 128, 77))",
            "color-mix(in hwb increasing hue, hwb(50deg 30% 40%), hwb(330deg 30% 40%))",
            "color-mix(in hwb increasing hue, rgb(153, 140, 77), rgb(153, 77, 115))",
            "color-mix(in hwb increasing hue, hwb(330deg 30% 40%), hwb(50deg 30% 40%))",
            "color-mix(in hwb increasing hue, rgb(153, 77, 115), rgb(153, 140, 77))",
            "color-mix(in hwb increasing hue, hwb(20deg 30% 40%), hwb(320deg 30% 40%))",
            "color-mix(in hwb increasing hue, rgb(153, 102, 77), rgb(153, 77, 128))",
            "color-mix(in hwb increasing hue, hwb(320deg 30% 40%), hwb(20deg 30% 40%))",
            "color-mix(in hwb increasing hue, rgb(153, 77, 128), rgb(153, 102, 77))",
            "color-mix(in hwb decreasing hue, hwb(40deg 30% 40%), hwb(60deg 30% 40%))",
            "color-mix(in hwb decreasing hue, rgb(153, 128, 77), rgb(153, 153, 77))",
            "color-mix(in hwb decreasing hue, hwb(60deg 30% 40%), hwb(40deg 30% 40%))",
            "color-mix(in hwb decreasing hue, rgb(153, 153, 77), rgb(153, 128, 77))",
            "color-mix(in hwb decreasing hue, hwb(50deg 30% 40%), hwb(330deg 30% 40%))",
            "color-mix(in hwb decreasing hue, rgb(153, 140, 77), rgb(153, 77, 115))",
            "color-mix(in hwb decreasing hue, hwb(330deg 30% 40%), hwb(50deg 30% 40%))",
            "color-mix(in hwb decreasing hue, rgb(153, 77, 115), rgb(153, 140, 77))",
            "color-mix(in hwb decreasing hue, hwb(20deg 30% 40%), hwb(320deg 30% 40%))",
            "color-mix(in hwb decreasing hue, rgb(153, 102, 77), rgb(153, 77, 128))",
            "color-mix(in hwb decreasing hue, hwb(320deg 30% 40%), hwb(20deg 30% 40%))",
            "color-mix(in hwb decreasing hue, rgb(153, 77, 128), rgb(153, 102, 77))",
            "color-mix(in hwb, hwb(none none none), hwb(none none none))",
            "color-mix(in hwb, rgb(255, 0, 0), rgb(255, 0, 0))",
            "color-mix(in hwb, hwb(none none none), hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(255, 0, 0), rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%), hwb(none none none))",
            "color-mix(in hwb, rgb(26, 204, 26), rgb(255, 0, 0))",
            "color-mix(in hwb, hwb(120deg 10% none), hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgb(26, 255, 26), rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20%), hwb(30deg 30% none))",
            "color-mix(in hwb, rgb(26, 204, 26), rgb(255, 166, 77))",
            "color-mix(in hwb, hwb(none 10% 20%), hwb(30deg none 40%))",
            "color-mix(in hwb, rgb(204, 26, 26), rgb(153, 77, 0))",
            "color-mix(in hwb, hwb(120deg 10% 20% / none), hwb(30deg 30% 40%))",
            "color-mix(in hwb, rgba(26, 204, 26, 0), rgb(153, 115, 77))",
            "color-mix(in hwb, hwb(120deg 10% 20% / none), hwb(30deg 30% 40% / 0.5))",
            "color-mix(in hwb, rgba(26, 204, 26, 0), rgba(153, 115, 77, 0.5))",
            "color-mix(in hwb, hwb(120deg 10% 20% / none), hwb(30deg 30% 40% / none))",
            "color-mix(in hwb, rgba(26, 204, 26, 0), rgba(153, 115, 77, 0))",
            "color-mix(in hwb, color(display-p3 0 1 0) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, color(display-p3 0 1 0) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, lab(100 104.3 -50.9) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, lab(100 104.3 -50.9) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, lab(0 104.3 -50.9) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, lab(0 104.3 -50.9) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, lch(100 116 334) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, lch(100 116 334) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, lch(0 116 334) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, lch(0 116 334) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, oklab(100 0.365 -0.16) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, oklab(1 0.365 -0.16) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, oklab(0 0.365 -0.16) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, oklab(0 0.365 -0.16) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, oklch(100 0.399 336.3) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, oklch(1 0.399 336.3) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, oklch(0 0.399 336.3) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, oklch(0 0.399 336.3) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, oklab(1 0.365 -0.16) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, oklab(1 0.365 -0.16) 100%, rgb(0, 0, 0))",
            "color-mix(in hwb, oklch(1 0.399 336.3) 100%, rgb(0, 0, 0) 0%)",
            "color-mix(in hwb, oklch(1 0.399 336.3) 100%, rgb(0, 0, 0))",
            "color-mix(in lch, lch(10 20 30deg), lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 30), lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg) 25%, lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 30) 25%, lch(50 60 70))",
            "color-mix(in lch, 25% lch(10 20 30deg), lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 30) 25%, lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg), 25% lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 30) 75%, lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg), lch(50 60 70deg) 25%)",
            "color-mix(in lch, lch(10 20 30) 75%, lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg) 25%, lch(50 60 70deg) 75%)",
            "color-mix(in lch, lch(10 20 30) 25%, lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg) 30%, lch(50 60 70deg) 90%)",
            "color-mix(in lch, lch(10 20 30) 30%, lch(50 60 70) 90%)",
            "color-mix(in lch, lch(10 20 30deg) 12.5%, lch(50 60 70deg) 37.5%)",
            "color-mix(in lch, lch(10 20 30) 12.5%, lch(50 60 70) 37.5%)",
            "color-mix(in lch, lch(10 20 30deg) 0%, lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 30) 0%, lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg / .4), lch(50 60 70deg / .8))",
            "color-mix(in lch, lch(10 20 30 / 0.4), lch(50 60 70 / 0.8))",
            "color-mix(in lch, lch(10 20 30deg / .4) 25%, lch(50 60 70deg / .8))",
            "color-mix(in lch, lch(10 20 30 / 0.4) 25%, lch(50 60 70 / 0.8))",
            "color-mix(in lch, 25% lch(10 20 30deg / .4), lch(50 60 70deg / .8))",
            "color-mix(in lch, lch(10 20 30 / 0.4) 25%, lch(50 60 70 / 0.8))",
            "color-mix(in lch, lch(10 20 30deg / .4), 25% lch(50 60 70deg / .8))",
            "color-mix(in lch, lch(10 20 30 / 0.4) 75%, lch(50 60 70 / 0.8))",
            "color-mix(in lch, lch(10 20 30deg / .4), lch(50 60 70deg / .8) 25%)",
            "color-mix(in lch, lch(10 20 30 / 0.4) 75%, lch(50 60 70 / 0.8))",
            "color-mix(in lch, lch(10 20 30deg / .4) 25%, lch(50 60 70deg / .8) 75%)",
            "color-mix(in lch, lch(10 20 30 / 0.4) 25%, lch(50 60 70 / 0.8))",
            "color-mix(in lch, lch(10 20 30deg / .4) 30%, lch(50 60 70deg / .8) 90%)",
            "color-mix(in lch, lch(10 20 30 / 0.4) 30%, lch(50 60 70 / 0.8) 90%)",
            "color-mix(in lch, lch(10 20 30deg / .4) 12.5%, lch(50 60 70deg / .8) 37.5%)",
            "color-mix(in lch, lch(10 20 30 / 0.4) 12.5%, lch(50 60 70 / 0.8) 37.5%)",
            "color-mix(in lch, lch(10 20 30deg / .4) 0%, lch(50 60 70deg / .8))",
            "color-mix(in lch, lch(10 20 30 / 0.4) 0%, lch(50 60 70 / 0.8))",
            "color-mix(in lch, lch(100 0 40deg), lch(100 0 60deg))",
            "color-mix(in lch, lch(100 0 40), lch(100 0 60))",
            "color-mix(in lch, lch(100 0 60deg), lch(100 0 40deg))",
            "color-mix(in lch, lch(100 0 60), lch(100 0 40))",
            "color-mix(in lch, lch(100 0 50deg), lch(100 0 330deg))",
            "color-mix(in lch, lch(100 0 50), lch(100 0 330))",
            "color-mix(in lch, lch(100 0 330deg), lch(100 0 50deg))",
            "color-mix(in lch, lch(100 0 330), lch(100 0 50))",
            "color-mix(in lch, lch(100 0 20deg), lch(100 0 320deg))",
            "color-mix(in lch, lch(100 0 20), lch(100 0 320))",
            "color-mix(in lch, lch(100 0 320deg), lch(100 0 20deg))",
            "color-mix(in lch, lch(100 0 320), lch(100 0 20))",
            "color-mix(in lch shorter hue, lch(100 0 40deg), lch(100 0 60deg))",
            "color-mix(in lch, lch(100 0 40), lch(100 0 60))",
            "color-mix(in lch shorter hue, lch(100 0 60deg), lch(100 0 40deg))",
            "color-mix(in lch, lch(100 0 60), lch(100 0 40))",
            "color-mix(in lch shorter hue, lch(100 0 50deg), lch(100 0 330deg))",
            "color-mix(in lch, lch(100 0 50), lch(100 0 330))",
            "color-mix(in lch shorter hue, lch(100 0 330deg), lch(100 0 50deg))",
            "color-mix(in lch, lch(100 0 330), lch(100 0 50))",
            "color-mix(in lch shorter hue, lch(100 0 20deg), lch(100 0 320deg))",
            "color-mix(in lch, lch(100 0 20), lch(100 0 320))",
            "color-mix(in lch shorter hue, lch(100 0 320deg), lch(100 0 20deg))",
            "color-mix(in lch, lch(100 0 320), lch(100 0 20))",
            "color-mix(in lch longer hue, lch(100 0 40deg), lch(100 0 60deg))",
            "color-mix(in lch longer hue, lch(100 0 40), lch(100 0 60))",
            "color-mix(in lch longer hue, lch(100 0 60deg), lch(100 0 40deg))",
            "color-mix(in lch longer hue, lch(100 0 60), lch(100 0 40))",
            "color-mix(in lch longer hue, lch(100 0 50deg), lch(100 0 330deg))",
            "color-mix(in lch longer hue, lch(100 0 50), lch(100 0 330))",
            "color-mix(in lch longer hue, lch(100 0 330deg), lch(100 0 50deg))",
            "color-mix(in lch longer hue, lch(100 0 330), lch(100 0 50))",
            "color-mix(in lch longer hue, lch(100 0 20deg), lch(100 0 320deg))",
            "color-mix(in lch longer hue, lch(100 0 20), lch(100 0 320))",
            "color-mix(in lch longer hue, lch(100 0 320deg), lch(100 0 20deg))",
            "color-mix(in lch longer hue, lch(100 0 320), lch(100 0 20))",
            "color-mix(in lch increasing hue, lch(100 0 40deg), lch(100 0 60deg))",
            "color-mix(in lch increasing hue, lch(100 0 40), lch(100 0 60))",
            "color-mix(in lch increasing hue, lch(100 0 60deg), lch(100 0 40deg))",
            "color-mix(in lch increasing hue, lch(100 0 60), lch(100 0 40))",
            "color-mix(in lch increasing hue, lch(100 0 50deg), lch(100 0 330deg))",
            "color-mix(in lch increasing hue, lch(100 0 50), lch(100 0 330))",
            "color-mix(in lch increasing hue, lch(100 0 330deg), lch(100 0 50deg))",
            "color-mix(in lch increasing hue, lch(100 0 330), lch(100 0 50))",
            "color-mix(in lch increasing hue, lch(100 0 20deg), lch(100 0 320deg))",
            "color-mix(in lch increasing hue, lch(100 0 20), lch(100 0 320))",
            "color-mix(in lch increasing hue, lch(100 0 320deg), lch(100 0 20deg))",
            "color-mix(in lch increasing hue, lch(100 0 320), lch(100 0 20))",
            "color-mix(in lch decreasing hue, lch(100 0 40deg), lch(100 0 60deg))",
            "color-mix(in lch decreasing hue, lch(100 0 40), lch(100 0 60))",
            "color-mix(in lch decreasing hue, lch(100 0 60deg), lch(100 0 40deg))",
            "color-mix(in lch decreasing hue, lch(100 0 60), lch(100 0 40))",
            "color-mix(in lch decreasing hue, lch(100 0 50deg), lch(100 0 330deg))",
            "color-mix(in lch decreasing hue, lch(100 0 50), lch(100 0 330))",
            "color-mix(in lch decreasing hue, lch(100 0 330deg), lch(100 0 50deg))",
            "color-mix(in lch decreasing hue, lch(100 0 330), lch(100 0 50))",
            "color-mix(in lch decreasing hue, lch(100 0 20deg), lch(100 0 320deg))",
            "color-mix(in lch decreasing hue, lch(100 0 20), lch(100 0 320))",
            "color-mix(in lch decreasing hue, lch(100 0 320deg), lch(100 0 20deg))",
            "color-mix(in lch decreasing hue, lch(100 0 320), lch(100 0 20))",
            "color-mix(in lch, lch(none none none), lch(none none none))",
            "color-mix(in lch, lch(none none none), lch(none none none))",
            "color-mix(in lch, lch(none none none), lch(50 60 70deg))",
            "color-mix(in lch, lch(none none none), lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg), lch(none none none))",
            "color-mix(in lch, lch(10 20 30), lch(none none none))",
            "color-mix(in lch, lch(10 20 none), lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 none), lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg), lch(50 60 none))",
            "color-mix(in lch, lch(10 20 30), lch(50 60 none))",
            "color-mix(in lch, lch(none 20 30deg), lch(50 none 70deg))",
            "color-mix(in lch, lch(none 20 30), lch(50 none 70))",
            "color-mix(in lch, lch(10 20 30deg / none), lch(50 60 70deg))",
            "color-mix(in lch, lch(10 20 30 / none), lch(50 60 70))",
            "color-mix(in lch, lch(10 20 30deg / none), lch(50 60 70deg / 0.5))",
            "color-mix(in lch, lch(10 20 30 / none), lch(50 60 70 / 0.5))",
            "color-mix(in lch, lch(10 20 30deg / none), lch(50 60 70deg / none))",
            "color-mix(in lch, lch(10 20 30 / none), lch(50 60 70 / none))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg), oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 30), oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg) 25%, oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 30) 25%, oklch(0.5 0.6 70))",
            "color-mix(in oklch, 25% oklch(0.1 0.2 30deg), oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 30) 25%, oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg), 25% oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 30) 75%, oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg), oklch(0.5 0.6 70deg) 25%)",
            "color-mix(in oklch, oklch(0.1 0.2 30) 75%, oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg) 25%, oklch(0.5 0.6 70deg) 75%)",
            "color-mix(in oklch, oklch(0.1 0.2 30) 25%, oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg) 30%, oklch(0.5 0.6 70deg) 90%)",
            "color-mix(in oklch, oklch(0.1 0.2 30) 30%, oklch(0.5 0.6 70) 90%)",
            "color-mix(in oklch, oklch(0.1 0.2 30deg) 12.5%, oklch(0.5 0.6 70deg) 37.5%)",
            "color-mix(in oklch, oklch(0.1 0.2 30) 12.5%, oklch(0.5 0.6 70) 37.5%)",
            "color-mix(in oklch, oklch(0.1 0.2 30deg) 0%, oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 30) 0%, oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4), oklch(0.5 0.6 70deg / .8))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4), oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4) 25%, oklch(0.5 0.6 70deg / .8))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 25%, oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, 25% oklch(0.1 0.2 30deg / .4), oklch(0.5 0.6 70deg / .8))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 25%, oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4), 25% oklch(0.5 0.6 70deg / .8))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 75%, oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4), oklch(0.5 0.6 70deg / .8) 25%)",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 75%, oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4) 25%, oklch(0.5 0.6 70deg / .8) 75%)",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 25%, oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4) 30%, oklch(0.5 0.6 70deg / .8) 90%)",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 30%, oklch(0.5 0.6 70 / 0.8) 90%)",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4) 12.5%, oklch(0.5 0.6 70deg / .8) 37.5%)",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 12.5%, oklch(0.5 0.6 70 / 0.8) 37.5%)",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / .4) 0%, oklch(0.5 0.6 70deg / .8))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / 0.4) 0%, oklch(0.5 0.6 70 / 0.8))",
            "color-mix(in oklch, oklch(1 0 40deg), oklch(1 0 60deg))",
            "color-mix(in oklch, oklch(1 0 40), oklch(1 0 60))",
            "color-mix(in oklch, oklch(1 0 60deg), oklch(1 0 40deg))",
            "color-mix(in oklch, oklch(1 0 60), oklch(1 0 40))",
            "color-mix(in oklch, oklch(1 0 50deg), oklch(1 0 330deg))",
            "color-mix(in oklch, oklch(1 0 50), oklch(1 0 330))",
            "color-mix(in oklch, oklch(1 0 330deg), oklch(1 0 50deg))",
            "color-mix(in oklch, oklch(1 0 330), oklch(1 0 50))",
            "color-mix(in oklch, oklch(1 0 20deg), oklch(1 0 320deg))",
            "color-mix(in oklch, oklch(1 0 20), oklch(1 0 320))",
            "color-mix(in oklch, oklch(1 0 320deg), oklch(1 0 20deg))",
            "color-mix(in oklch, oklch(1 0 320), oklch(1 0 20))",
            "color-mix(in oklch shorter hue, oklch(1 0 40deg), oklch(1 0 60deg))",
            "color-mix(in oklch, oklch(1 0 40), oklch(1 0 60))",
            "color-mix(in oklch shorter hue, oklch(1 0 60deg), oklch(1 0 40deg))",
            "color-mix(in oklch, oklch(1 0 60), oklch(1 0 40))",
            "color-mix(in oklch shorter hue, oklch(1 0 50deg), oklch(1 0 330deg))",
            "color-mix(in oklch, oklch(1 0 50), oklch(1 0 330))",
            "color-mix(in oklch shorter hue, oklch(1 0 330deg), oklch(1 0 50deg))",
            "color-mix(in oklch, oklch(1 0 330), oklch(1 0 50))",
            "color-mix(in oklch shorter hue, oklch(1 0 20deg), oklch(1 0 320deg))",
            "color-mix(in oklch, oklch(1 0 20), oklch(1 0 320))",
            "color-mix(in oklch shorter hue, oklch(1 0 320deg), oklch(1 0 20deg))",
            "color-mix(in oklch, oklch(1 0 320), oklch(1 0 20))",
            "color-mix(in oklch longer hue, oklch(1 0 40deg), oklch(1 0 60deg))",
            "color-mix(in oklch longer hue, oklch(1 0 40), oklch(1 0 60))",
            "color-mix(in oklch longer hue, oklch(1 0 60deg), oklch(1 0 40deg))",
            "color-mix(in oklch longer hue, oklch(1 0 60), oklch(1 0 40))",
            "color-mix(in oklch longer hue, oklch(1 0 50deg), oklch(1 0 330deg))",
            "color-mix(in oklch longer hue, oklch(1 0 50), oklch(1 0 330))",
            "color-mix(in oklch longer hue, oklch(1 0 330deg), oklch(1 0 50deg))",
            "color-mix(in oklch longer hue, oklch(1 0 330), oklch(1 0 50))",
            "color-mix(in oklch longer hue, oklch(1 0 20deg), oklch(1 0 320deg))",
            "color-mix(in oklch longer hue, oklch(1 0 20), oklch(1 0 320))",
            "color-mix(in oklch longer hue, oklch(1 0 320deg), oklch(1 0 20deg))",
            "color-mix(in oklch longer hue, oklch(1 0 320), oklch(1 0 20))",
            "color-mix(in oklch increasing hue, oklch(1 0 40deg), oklch(1 0 60deg))",
            "color-mix(in oklch increasing hue, oklch(1 0 40), oklch(1 0 60))",
            "color-mix(in oklch increasing hue, oklch(1 0 60deg), oklch(1 0 40deg))",
            "color-mix(in oklch increasing hue, oklch(1 0 60), oklch(1 0 40))",
            "color-mix(in oklch increasing hue, oklch(1 0 50deg), oklch(1 0 330deg))",
            "color-mix(in oklch increasing hue, oklch(1 0 50), oklch(1 0 330))",
            "color-mix(in oklch increasing hue, oklch(1 0 330deg), oklch(1 0 50deg))",
            "color-mix(in oklch increasing hue, oklch(1 0 330), oklch(1 0 50))",
            "color-mix(in oklch increasing hue, oklch(1 0 20deg), oklch(1 0 320deg))",
            "color-mix(in oklch increasing hue, oklch(1 0 20), oklch(1 0 320))",
            "color-mix(in oklch increasing hue, oklch(1 0 320deg), oklch(1 0 20deg))",
            "color-mix(in oklch increasing hue, oklch(1 0 320), oklch(1 0 20))",
            "color-mix(in oklch decreasing hue, oklch(1 0 40deg), oklch(1 0 60deg))",
            "color-mix(in oklch decreasing hue, oklch(1 0 40), oklch(1 0 60))",
            "color-mix(in oklch decreasing hue, oklch(1 0 60deg), oklch(1 0 40deg))",
            "color-mix(in oklch decreasing hue, oklch(1 0 60), oklch(1 0 40))",
            "color-mix(in oklch decreasing hue, oklch(1 0 50deg), oklch(1 0 330deg))",
            "color-mix(in oklch decreasing hue, oklch(1 0 50), oklch(1 0 330))",
            "color-mix(in oklch decreasing hue, oklch(1 0 330deg), oklch(1 0 50deg))",
            "color-mix(in oklch decreasing hue, oklch(1 0 330), oklch(1 0 50))",
            "color-mix(in oklch decreasing hue, oklch(1 0 20deg), oklch(1 0 320deg))",
            "color-mix(in oklch decreasing hue, oklch(1 0 20), oklch(1 0 320))",
            "color-mix(in oklch decreasing hue, oklch(1 0 320deg), oklch(1 0 20deg))",
            "color-mix(in oklch decreasing hue, oklch(1 0 320), oklch(1 0 20))",
            "color-mix(in oklch, oklch(none none none), oklch(none none none))",
            "color-mix(in oklch, oklch(none none none), oklch(none none none))",
            "color-mix(in oklch, oklch(none none none), oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(none none none), oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg), oklch(none none none))",
            "color-mix(in oklch, oklch(0.1 0.2 30), oklch(none none none))",
            "color-mix(in oklch, oklch(0.1 0.2 none), oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 none), oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg), oklch(0.5 0.6 none))",
            "color-mix(in oklch, oklch(0.1 0.2 30), oklch(0.5 0.6 none))",
            "color-mix(in oklch, oklch(none 0.2 30deg), oklch(0.5 none 70deg))",
            "color-mix(in oklch, oklch(none 0.2 30), oklch(0.5 none 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / none), oklch(0.5 0.6 70deg))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / none), oklch(0.5 0.6 70))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / none), oklch(0.5 0.6 70deg / 0.5))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / none), oklch(0.5 0.6 70 / 0.5))",
            "color-mix(in oklch, oklch(0.1 0.2 30deg / none), oklch(0.5 0.6 70deg / none))",
            "color-mix(in oklch, oklch(0.1 0.2 30 / none), oklch(0.5 0.6 70 / none))",
            "color-mix(in lab, lab(10 20 -30), lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30) 25%, lab(50 60 -70))",
            "color-mix(in lab, 25% lab(10 20 -30), lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30), 25% lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30), lab(50 60 -70) 25%)",
            "color-mix(in lab, lab(10 20 -30) 25%, lab(50 60 -70) 75%)",
            "color-mix(in lab, lab(10 20 -30) 30%, lab(50 60 -70) 90%)",
            "color-mix(in lab, lab(10 20 -30) 12.5%, lab(50 60 -70) 37.5%)",
            "color-mix(in lab, lab(10 20 -30) 0%, lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30 / .4), lab(50 60 -70 / .8))",
            "color-mix(in lab, lab(10 20 -30 / .4) 25%, lab(50 60 -70 / .8))",
            "color-mix(in lab, 25% lab(10 20 -30 / .4), lab(50 60 -70 / .8))",
            "color-mix(in lab, lab(10 20 -30 / .4), 25% lab(50 60 -70 / .8))",
            "color-mix(in lab, lab(10 20 -30 / .4), lab(50 60 -70 / .8) 25%)",
            "color-mix(in lab, lab(10 20 -30 / .4) 25%, lab(50 60 -70 / .8) 75%)",
            "color-mix(in lab, lab(10 20 -30 / .4) 30%, lab(50 60 -70 / .8) 90%)",
            "color-mix(in lab, lab(10 20 -30 / .4) 12.5%, lab(50 60 -70 / .8) 37.5%)",
            "color-mix(in lab, lab(10 20 -30 / .4) 0%, lab(50 60 -70 / .8))",
            "color-mix(in lab, lab(none none none), lab(none none none))",
            "color-mix(in lab, lab(none none none), lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30), lab(none none none))",
            "color-mix(in lab, lab(10 none -30), lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30), lab(50 none -70))",
            "color-mix(in lab, lab(none 20 -30), lab(50 none -70))",
            "color-mix(in lab, lab(10 20 -30 / none), lab(50 60 -70))",
            "color-mix(in lab, lab(10 20 -30 / none), lab(50 60 -70 / 0.5))",
            "color-mix(in lab, lab(10 20 -30 / none), lab(50 60 -70 / none))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3), oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3) 25%, oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, 25% oklab(0.1 0.2 -0.3), oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3), 25% oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3), oklab(0.5 0.6 -0.7) 25%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3) 25%, oklab(0.5 0.6 -0.7) 75%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3) 30%, oklab(0.5 0.6 -0.7) 90%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3) 12.5%, oklab(0.5 0.6 -0.7) 37.5%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3) 0%, oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4), oklab(0.5 0.6 -0.7 / .8))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4) 25%, oklab(0.5 0.6 -0.7 / .8))",
            "color-mix(in oklab, 25% oklab(0.1 0.2 -0.3 / .4), oklab(0.5 0.6 -0.7 / .8))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4), 25% oklab(0.5 0.6 -0.7 / .8))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4), oklab(0.5 0.6 -0.7 / .8) 25%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4) 25%, oklab(0.5 0.6 -0.7 / .8) 75%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4) 30%, oklab(0.5 0.6 -0.7 / .8) 90%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4) 12.5%, oklab(0.5 0.6 -0.7 / .8) 37.5%)",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / .4) 0%, oklab(0.5 0.6 -0.7 / .8))",
            "color-mix(in oklab, oklab(none none none), oklab(none none none))",
            "color-mix(in oklab, oklab(none none none), oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3), oklab(none none none))",
            "color-mix(in oklab, oklab(0.1 none -0.3), oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3), oklab(0.5 none -0.7))",
            "color-mix(in oklab, oklab(none 0.2 -0.3), oklab(0.5 none -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / none), oklab(0.5 0.6 -0.7))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / none), oklab(0.5 0.6 -0.7 / 0.5))",
            "color-mix(in oklab, oklab(0.1 0.2 -0.3 / none), oklab(0.5 0.6 -0.7 / none))",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "color-mix")).toBe(true));

        for (const colorSpace of [
            "srgb",
            "srgb-linear",
            "display-p3",
            "a98-rgb",
            "prophoto-rgb",
            "rec2020",
            "xyz",
            "xyz-d50",
            "xyz-d65",
        ]) {
            const cases = [
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3), color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, 50% color(${colorSpace} .1 .2 .3), color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3), 50% color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3) 25%, color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3), color(${colorSpace} .5 .6 .7) 25%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3) 25%, color(${colorSpace} .5 .6 .7) 75%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3) 30%, color(${colorSpace} .5 .6 .7) 90%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3) 12.5%, color(${colorSpace} .5 .6 .7) 37.5%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3) 0%, color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .5), color(${colorSpace} .5 .6 .7 / .8))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .4) 25%, color(${colorSpace} .5 .6 .7 / .8))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .4), color(${colorSpace} .5 .6 .7 / .8) 25%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .4) 25%, color(${colorSpace} .5 .6 .7 / .8) 75%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .4) 30%, color(${colorSpace} .5 .6 .7 / .8) 90%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .4) 12.5%, color(${colorSpace} .5 .6 .7 / .8) 37.5%)`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / .4) 0%, color(${colorSpace} .5 .6 .7 / .8))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} 2 3 4 / 5), color(${colorSpace} 4 6 8 / 10))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} -2 -3 -4), color(${colorSpace} -4 -6 -8))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} -2 -3 -4 / -5), color(${colorSpace} -4 -6 -8 / -10))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} none none none), color(${colorSpace} none none none))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} none none none), color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3), color(${colorSpace} none none none))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 none), color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3), color(${colorSpace} .5 .6 none))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} none .2 .3), color(${colorSpace} .5 none .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / none), color(${colorSpace} .5 .6 .7))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / none), color(${colorSpace} .5 .6 .7 / 0.5))`,
                `color-mix(in ${colorSpace}, color(${colorSpace} .1 .2 .3 / none), color(${colorSpace} .5 .6 .7 / none))`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, "color-mix")).toBe(true));
        }
    });

    it("should test invalid <color-mix()>", () => {
        const cases = [
            "color-mix(in hsl, hsl(120deg 10% 20%) -10%, hsl(30deg 30% 40%))",
            "color-mix(in hsl, hsl(120deg 10% 20%) 150%, hsl(30deg 30% 40%))",
            "color-mix(in hsl, hsl(120deg 10% 20%) 0%, hsl(30deg 30% 40%) 0%)",
            "color-mix(in hsl, hsl(120deg 10% 20% 40%) -10%, hsl(30deg 30% 40% 80%))",
            "color-mix(in hsl, hsl(120deg 10% 20% 40%) 150%, hsl(30deg 30% 40% 80%))",
            "color-mix(in hsl, hsl(120deg 10% 20% 40%) 0%, hsl(30deg 30% 40% 80%) 0%)",
            "color-mix(in hsl hue, hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl shorter, hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl foo, hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hsl, hsl(120deg 10% 20%) hsl(30deg 30% 40%))",
            "color-mix(hsl(120deg 10% 20%), hsl(30deg 30% 40%), in hsl)",
            "color-mix(hsl(120deg 10% 20%), hsl(30deg 30% 40%))",
            "color-mix(in hwb, hwb(120deg 10% 20%) -10%, hwb(30deg 30% 40%))",
            "color-mix(in hwb, hwb(120deg 10% 20%) 150%, hwb(30deg 30% 40%))",
            "color-mix(in hwb, hwb(120deg 10% 20%) 0%, hwb(30deg 30% 40%) 0%)",
            "color-mix(in hwb, hwb(120deg 10% 20% 40%) -10%, hwb(30deg 30% 40% 80%))",
            "color-mix(in hwb, hwb(120deg 10% 20% 40%) 150%, hwb(30deg 30% 40% 80%))",
            "color-mix(in hwb, hwb(120deg 10% 20% 40%) 0%, hwb(30deg 30% 40% 80%) 0%)",
            "color-mix(in hwb hue, hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb shorter, hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb foo, hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in hwb, hwb(120deg 10% 20%) hwb(30deg 30% 40%))",
            "color-mix(hwb(120deg 10% 20%), hwb(30deg 30% 40%), in hwb)",
            "color-mix(hwb(120deg 10% 20%), hwb(30deg 30% 40%))",
            "color-mix(in srgb, red, blue blue)",
        ];

        cases.forEach((c) => expect(Color.isValid(c, "color-mix")).toBe(false));

        for (const colorSpace of ["lch", "oklch"]) {
            const cases = [
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg) -10%, ${colorSpace}(50% 60 70deg))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg) 150%, ${colorSpace}(50% 60 70deg))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg) 0%, ${colorSpace}(50% 60 70deg) 0%)`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg / .4) -10%, ${colorSpace}(50% 60 70deg / .8))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg / .4) 150%, ${colorSpace}(50% 60 70deg / .8))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg / .4) 0%, ${colorSpace}(50% 60 70deg / .8) 0%)`,
                `color-mix(in ${colorSpace} hue, ${colorSpace}(10% 20 30deg), ${colorSpace}(50% 60 70deg))`,
                `color-mix(in ${colorSpace} shorter, ${colorSpace}(10% 20 30deg), ${colorSpace}(50% 60 70deg))`,
                `color-mix(in ${colorSpace} foo, ${colorSpace}(10% 20 30deg), ${colorSpace}(50% 60 70deg))`,
                `color-mix(in ${colorSpace} ${colorSpace}(10% 20 30deg), ${colorSpace}(50% 60 70deg))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30deg) ${colorSpace}(50% 60 70deg))`,
                `color-mix(${colorSpace}(10% 20 30deg), ${colorSpace}(50% 60 70deg), in ${colorSpace})`,
                `color-mix(${colorSpace}(10% 20 30deg), ${colorSpace}(50% 60 70deg))`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, "color-mix")).toBe(false));
        }

        for (const colorSpace of ["lab", "oklab"]) {
            const cases = [
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) -10%, ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) 150%, ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) 0%, ${colorSpace}(50% 60 70) 0%)`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30 / .4) -10%, ${colorSpace}(50% 60 70 / .8))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30 / .4) 150%, ${colorSpace}(50% 60 70 / .8))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30 / .4) 0%, ${colorSpace}(50% 60 70 / .8) 0%)`,
                `color-mix(in ${colorSpace} longer hue, ${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace} ${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) ${colorSpace}(50% 60 70))`,
                `color-mix(${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70), in ${colorSpace})`,
                `color-mix(${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70))`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, "color-mix")).toBe(false));
        }

        for (const colorSpace of [
            "srgb",
            "srgb-linear",
            "display-p3",
            "a98-rgb",
            "prophoto-rgb",
            "rec2020",
            "xyz",
            "xyz-d50",
            "xyz-d65",
        ]) {
            const cases = [
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) -10%, ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) 150%, ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) 0%, ${colorSpace}(50% 60 70) 0%)`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30 / .4) -10%, ${colorSpace}(50% 60 70 / .8))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30 / .4) 150%, ${colorSpace}(50% 60 70 / .8))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30 / .4) 0%, ${colorSpace}(50% 60 70 / .8) 0%)`,
                `color-mix(in ${colorSpace} longer hue, ${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace} ${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70))`,
                `color-mix(in ${colorSpace}, ${colorSpace}(10% 20 30) ${colorSpace}(50% 60 70))`,
                `color-mix(${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70), in ${colorSpace})`,
                `color-mix(${colorSpace}(10% 20 30), ${colorSpace}(50% 60 70))`,
            ];

            cases.forEach((c) => expect(Color.isValid(c, "color-mix")).toBe(false));
        }
    });
});
